# Generated from CelestialParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0086")
        buf.write("\u0440\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\3")
        buf.write("\2\3\2\3\2\7\2`\n\2\f\2\16\2c\13\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\4\3\4\5\4n\n\4\3\5\3\5\5\5r\n\5\3\6\5\6u\n")
        buf.write("\6\3\6\3\6\3\7\3\7\3\b\3\b\6\b}\n\b\r\b\16\b~\3\b\3\b")
        buf.write("\5\b\u0083\n\b\3\b\3\b\3\b\3\b\5\b\u0089\n\b\3\b\3\b\5")
        buf.write("\b\u008d\n\b\3\b\3\b\6\b\u0091\n\b\r\b\16\b\u0092\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\7\b\u009b\n\b\f\b\16\b\u009e\13\b")
        buf.write("\3\b\3\b\3\b\6\b\u00a3\n\b\r\b\16\b\u00a4\3\b\3\b\5\b")
        buf.write("\u00a9\n\b\3\t\3\t\3\t\5\t\u00ae\n\t\3\n\3\n\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u00c1\n\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\5\13\u00ce\n\13\3\13\3\13")
        buf.write("\3\13\7\13\u00d3\n\13\f\13\16\13\u00d6\13\13\3\f\3\f\3")
        buf.write("\f\7\f\u00db\n\f\f\f\16\f\u00de\13\f\3\r\3\r\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\16\3\17\3\17\6\17\u00ea\n\17\r\17\16\17")
        buf.write("\u00eb\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\5\20\u00f9\n\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\7\21\u0101\n\21\f\21\16\21\u0104\13\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0112")
        buf.write("\n\22\f\22\16\22\u0115\13\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u011d\n\23\3\23\3\23\3\23\3\24\3\24\3\24\7")
        buf.write("\24\u0125\n\24\f\24\16\24\u0128\13\24\3\25\3\25\3\25\3")
        buf.write("\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u013f\n\31\f")
        buf.write("\31\16\31\u0142\13\31\5\31\u0144\n\31\3\31\3\31\3\31\3")
        buf.write("\32\3\32\3\32\5\32\u014c\n\32\3\32\3\32\5\32\u0150\n\32")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u0156\n\32\3\32\5\32\u0159\n")
        buf.write("\32\3\32\3\32\3\32\5\32\u015e\n\32\3\32\5\32\u0161\n\32")
        buf.write("\3\32\3\32\3\33\3\33\5\33\u0167\n\33\3\33\3\33\5\33\u016b")
        buf.write("\n\33\3\33\5\33\u016e\n\33\3\33\5\33\u0171\n\33\3\33\3")
        buf.write("\33\5\33\u0175\n\33\3\33\3\33\5\33\u0179\n\33\3\33\5\33")
        buf.write("\u017c\n\33\3\33\5\33\u017f\n\33\3\33\3\33\5\33\u0183")
        buf.write("\n\33\3\33\3\33\5\33\u0187\n\33\3\33\3\33\5\33\u018b\n")
        buf.write("\33\3\33\3\33\5\33\u018f\n\33\3\33\3\33\5\33\u0193\n\33")
        buf.write("\3\33\3\33\5\33\u0197\n\33\3\33\5\33\u019a\n\33\3\33\5")
        buf.write("\33\u019d\n\33\3\33\3\33\5\33\u01a1\n\33\3\33\3\33\5\33")
        buf.write("\u01a5\n\33\3\33\3\33\5\33\u01a9\n\33\3\33\3\33\5\33\u01ad")
        buf.write("\n\33\3\33\3\33\5\33\u01b1\n\33\3\33\5\33\u01b4\n\33\3")
        buf.write("\33\5\33\u01b7\n\33\3\33\3\33\5\33\u01bb\n\33\5\33\u01bd")
        buf.write("\n\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u01c5\n\35\3")
        buf.write("\35\3\35\5\35\u01c9\n\35\3\35\3\35\5\35\u01cd\n\35\3\35")
        buf.write("\5\35\u01d0\n\35\3\35\3\35\3\35\3\35\5\35\u01d6\n\35\3")
        buf.write("\35\5\35\u01d9\n\35\3\35\3\35\3\35\5\35\u01de\n\35\3\35")
        buf.write("\5\35\u01e1\n\35\3\35\3\35\3\35\3\35\5\35\u01e7\n\35\3")
        buf.write("\35\3\35\5\35\u01eb\n\35\3\35\3\35\3\36\3\36\3\36\7\36")
        buf.write("\u01f2\n\36\f\36\16\36\u01f5\13\36\3\37\3\37\3\37\3 \3")
        buf.write(" \3 \7 \u01fd\n \f \16 \u0200\13 \3 \3 \3 \3!\3!\5!\u0207")
        buf.write("\n!\3!\3!\3\"\3\"\3\"\3\"\5\"\u020f\n\"\3\"\3\"\3#\3#")
        buf.write("\3#\3#\3#\5#\u0218\n#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\5$\u0225\n$\3%\3%\7%\u0229\n%\f%\16%\u022c\13%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\5%\u0243\n%\3%\3%\3%\3%\3%\3%\3%\5%\u024c\n%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u0256\n%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u02a3\n%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u02af\n%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u02bf\n%\3%\3%\3%\3%\3")
        buf.write("%\7%\u02c6\n%\f%\16%\u02c9\13%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\5%\u02d6\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u02f3")
        buf.write("\n%\f%\16%\u02f6\13%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0300")
        buf.write("\n%\3%\3%\5%\u0304\n%\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\7\'\u0314\n\'\f\'\16\'\u0317\13\'")
        buf.write("\3(\3(\3(\3(\3(\3(\7(\u031f\n(\f(\16(\u0322\13(\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3(\5(\u032e\n(\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\5)\u033b\n)\3)\3)\3)\3)\3)\5)\u0342\n")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0384\n)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\5)\u0390\n)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\7)\u03a7\n)\f")
        buf.write(")\16)\u03aa\13)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u03b5\n")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\7)\u03e1\n)\f)\16)\u03e4\13)\7)\u03e6")
        buf.write("\n)\f)\16)\u03e9\13)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0415\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\6+\u041d\n+\r+\16+\u041e\5+\u0421\n+")
        buf.write("\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\6,\u0430\n,\r")
        buf.write(",\16,\u0431\5,\u0434\n,\3-\3-\3-\7-\u0439\n-\f-\16-\u043c")
        buf.write("\13-\3.\3.\3.\2\5\24LP/\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\2\13")
        buf.write("\5\2jmoowx\3\2BC\5\2\36\36DD\\\\\4\2bbss\3\2tv\3\2rs\4")
        buf.write("\2\60\60jm\3\2hi\3\2fg\2\u04d9\2a\3\2\2\2\4f\3\2\2\2\6")
        buf.write("m\3\2\2\2\bo\3\2\2\2\nt\3\2\2\2\fx\3\2\2\2\16\u00a8\3")
        buf.write("\2\2\2\20\u00aa\3\2\2\2\22\u00af\3\2\2\2\24\u00cd\3\2")
        buf.write("\2\2\26\u00d7\3\2\2\2\30\u00df\3\2\2\2\32\u00e3\3\2\2")
        buf.write("\2\34\u00e7\3\2\2\2\36\u00f8\3\2\2\2 \u00fa\3\2\2\2\"")
        buf.write("\u0107\3\2\2\2$\u0118\3\2\2\2&\u0121\3\2\2\2(\u0129\3")
        buf.write("\2\2\2*\u012c\3\2\2\2,\u0130\3\2\2\2.\u0134\3\2\2\2\60")
        buf.write("\u0138\3\2\2\2\62\u0148\3\2\2\2\64\u01bc\3\2\2\2\66\u01be")
        buf.write("\3\2\2\28\u01c4\3\2\2\2:\u01ee\3\2\2\2<\u01f6\3\2\2\2")
        buf.write(">\u01f9\3\2\2\2@\u0204\3\2\2\2B\u020a\3\2\2\2D\u0212\3")
        buf.write("\2\2\2F\u0224\3\2\2\2H\u0303\3\2\2\2J\u0305\3\2\2\2L\u0308")
        buf.write("\3\2\2\2N\u032d\3\2\2\2P\u03b4\3\2\2\2R\u0414\3\2\2\2")
        buf.write("T\u0420\3\2\2\2V\u0433\3\2\2\2X\u0435\3\2\2\2Z\u043d\3")
        buf.write("\2\2\2\\`\5\32\16\2]`\5\4\3\2^`\5\16\b\2_\\\3\2\2\2_]")
        buf.write("\3\2\2\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2bd\3\2")
        buf.write("\2\2ca\3\2\2\2de\7\2\2\3e\3\3\2\2\2fg\7?\2\2gh\5\22\n")
        buf.write("\2hi\5\6\4\2ij\7\177\2\2j\5\3\2\2\2kn\5\b\5\2ln\5P)\2")
        buf.write("mk\3\2\2\2ml\3\2\2\2n\7\3\2\2\2oq\5\n\6\2pr\5\n\6\2qp")
        buf.write("\3\2\2\2qr\3\2\2\2r\t\3\2\2\2su\5\f\7\2ts\3\2\2\2tu\3")
        buf.write("\2\2\2uv\3\2\2\2vw\7a\2\2w\13\3\2\2\2xy\t\2\2\2y\r\3\2")
        buf.write("\2\2z|\7/\2\2{}\7`\2\2|{\3\2\2\2}~\3\2\2\2~|\3\2\2\2~")
        buf.write("\177\3\2\2\2\177\u0082\3\2\2\2\u0080\u0081\7\23\2\2\u0081")
        buf.write("\u0083\5\22\n\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2")
        buf.write("\2\u0083\u0084\3\2\2\2\u0084\u00a9\7\177\2\2\u0085\u0088")
        buf.write("\7/\2\2\u0086\u0089\7t\2\2\u0087\u0089\5\22\n\2\u0088")
        buf.write("\u0086\3\2\2\2\u0088\u0087\3\2\2\2\u0089\u008c\3\2\2\2")
        buf.write("\u008a\u008b\7\23\2\2\u008b\u008d\5\22\n\2\u008c\u008a")
        buf.write("\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008e\3\2\2\2\u008e")
        buf.write("\u0090\7,\2\2\u008f\u0091\7`\2\2\u0090\u008f\3\2\2\2\u0091")
        buf.write("\u0092\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2")
        buf.write("\u0093\u0094\3\2\2\2\u0094\u00a9\7\177\2\2\u0095\u0096")
        buf.write("\7/\2\2\u0096\u0097\7y\2\2\u0097\u009c\5\20\t\2\u0098")
        buf.write("\u0099\7\u0080\2\2\u0099\u009b\5\20\t\2\u009a\u0098\3")
        buf.write("\2\2\2\u009b\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d")
        buf.write("\3\2\2\2\u009d\u009f\3\2\2\2\u009e\u009c\3\2\2\2\u009f")
        buf.write("\u00a0\7z\2\2\u00a0\u00a2\7,\2\2\u00a1\u00a3\7`\2\2\u00a2")
        buf.write("\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00a2\3\2\2\2")
        buf.write("\u00a4\u00a5\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a7\7")
        buf.write("\177\2\2\u00a7\u00a9\3\2\2\2\u00a8z\3\2\2\2\u00a8\u0085")
        buf.write("\3\2\2\2\u00a8\u0095\3\2\2\2\u00a9\17\3\2\2\2\u00aa\u00ad")
        buf.write("\5\22\n\2\u00ab\u00ac\7\23\2\2\u00ac\u00ae\5\22\n\2\u00ad")
        buf.write("\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\21\3\2\2\2\u00af")
        buf.write("\u00b0\7\u0083\2\2\u00b0\23\3\2\2\2\u00b1\u00b2\b\13\1")
        buf.write("\2\u00b2\u00b3\7\16\2\2\u00b3\u00b4\7}\2\2\u00b4\u00b5")
        buf.write("\5\24\13\2\u00b5\u00b6\7e\2\2\u00b6\u00b7\5\24\13\2\u00b7")
        buf.write("\u00b8\7~\2\2\u00b8\u00ce\3\2\2\2\u00b9\u00ce\7\4\2\2")
        buf.write("\u00ba\u00ce\7\13\2\2\u00bb\u00ce\7\b\2\2\u00bc\u00ce")
        buf.write("\7\t\2\2\u00bd\u00ce\7\f\2\2\u00be\u00c0\7\3\2\2\u00bf")
        buf.write("\u00c1\7<\2\2\u00c0\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2")
        buf.write("\u00c1\u00ce\3\2\2\2\u00c2\u00ce\7\7\2\2\u00c3\u00ce\7")
        buf.write("\6\2\2\u00c4\u00ce\5\22\n\2\u00c5\u00c6\7\n\2\2\u00c6")
        buf.write("\u00c7\7l\2\2\u00c7\u00c8\5\22\n\2\u00c8\u00c9\7m\2\2")
        buf.write("\u00c9\u00ce\3\2\2\2\u00ca\u00ce\7\17\2\2\u00cb\u00ce")
        buf.write("\7\20\2\2\u00cc\u00ce\7\21\2\2\u00cd\u00b1\3\2\2\2\u00cd")
        buf.write("\u00b9\3\2\2\2\u00cd\u00ba\3\2\2\2\u00cd\u00bb\3\2\2\2")
        buf.write("\u00cd\u00bc\3\2\2\2\u00cd\u00bd\3\2\2\2\u00cd\u00be\3")
        buf.write("\2\2\2\u00cd\u00c2\3\2\2\2\u00cd\u00c3\3\2\2\2\u00cd\u00c4")
        buf.write("\3\2\2\2\u00cd\u00c5\3\2\2\2\u00cd\u00ca\3\2\2\2\u00cd")
        buf.write("\u00cb\3\2\2\2\u00cd\u00cc\3\2\2\2\u00ce\u00d4\3\2\2\2")
        buf.write("\u00cf\u00d0\f\21\2\2\u00d0\u00d1\7{\2\2\u00d1\u00d3\7")
        buf.write("|\2\2\u00d2\u00cf\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2")
        buf.write("\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\25\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d7\u00dc\5\30\r\2\u00d8\u00d9\7\u0080\2\2")
        buf.write("\u00d9\u00db\5\30\r\2\u00da\u00d8\3\2\2\2\u00db\u00de")
        buf.write("\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd")
        buf.write("\27\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e0\5\22\n\2\u00e0")
        buf.write("\u00e1\7\u0082\2\2\u00e1\u00e2\5\24\13\2\u00e2\31\3\2")
        buf.write("\2\2\u00e3\u00e4\7\r\2\2\u00e4\u00e5\5\22\n\2\u00e5\u00e6")
        buf.write("\5\34\17\2\u00e6\33\3\2\2\2\u00e7\u00e9\7y\2\2\u00e8\u00ea")
        buf.write("\5\36\20\2\u00e9\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2")
        buf.write("\u00ed\u00ee\7z\2\2\u00ee\35\3\2\2\2\u00ef\u00f9\5B\"")
        buf.write("\2\u00f0\u00f9\5 \21\2\u00f1\u00f9\5\"\22\2\u00f2\u00f9")
        buf.write("\5$\23\2\u00f3\u00f9\5,\27\2\u00f4\u00f9\5\60\31\2\u00f5")
        buf.write("\u00f9\5\62\32\2\u00f6\u00f9\58\35\2\u00f7\u00f9\5D#\2")
        buf.write("\u00f8\u00ef\3\2\2\2\u00f8\u00f0\3\2\2\2\u00f8\u00f1\3")
        buf.write("\2\2\2\u00f8\u00f2\3\2\2\2\u00f8\u00f3\3\2\2\2\u00f8\u00f4")
        buf.write("\3\2\2\2\u00f8\u00f5\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8")
        buf.write("\u00f7\3\2\2\2\u00f9\37\3\2\2\2\u00fa\u00fb\7\5\2\2\u00fb")
        buf.write("\u00fc\5\22\n\2\u00fc\u00fd\7y\2\2\u00fd\u0102\5\22\n")
        buf.write("\2\u00fe\u00ff\7\u0080\2\2\u00ff\u0101\5\22\n\2\u0100")
        buf.write("\u00fe\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2")
        buf.write("\u0102\u0103\3\2\2\2\u0103\u0105\3\2\2\2\u0104\u0102\3")
        buf.write("\2\2\2\u0105\u0106\7z\2\2\u0106!\3\2\2\2\u0107\u0108\7")
        buf.write("S\2\2\u0108\u0109\5\22\n\2\u0109\u010a\7y\2\2\u010a\u010b")
        buf.write("\5\24\13\2\u010b\u010c\5\22\n\2\u010c\u0113\7\177\2\2")
        buf.write("\u010d\u010e\5\24\13\2\u010e\u010f\5\22\n\2\u010f\u0110")
        buf.write("\7\177\2\2\u0110\u0112\3\2\2\2\u0111\u010d\3\2\2\2\u0112")
        buf.write("\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0116\3\2\2\2\u0115\u0113\3\2\2\2\u0116\u0117\7")
        buf.write("z\2\2\u0117#\3\2\2\2\u0118\u0119\7R\2\2\u0119\u011a\5")
        buf.write("\22\n\2\u011a\u011c\7}\2\2\u011b\u011d\5&\24\2\u011c\u011b")
        buf.write("\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u011f\7~\2\2\u011f\u0120\5*\26\2\u0120%\3\2\2\2\u0121")
        buf.write("\u0126\5(\25\2\u0122\u0123\7\u0080\2\2\u0123\u0125\5(")
        buf.write("\25\2\u0124\u0122\3\2\2\2\u0125\u0128\3\2\2\2\u0126\u0124")
        buf.write("\3\2\2\2\u0126\u0127\3\2\2\2\u0127\'\3\2\2\2\u0128\u0126")
        buf.write("\3\2\2\2\u0129\u012a\5\24\13\2\u012a\u012b\5\22\n\2\u012b")
        buf.write(")\3\2\2\2\u012c\u012d\7y\2\2\u012d\u012e\5P)\2\u012e\u012f")
        buf.write("\7z\2\2\u012f+\3\2\2\2\u0130\u0131\7\64\2\2\u0131\u0132")
        buf.write("\5\22\n\2\u0132\u0133\5.\30\2\u0133-\3\2\2\2\u0134\u0135")
        buf.write("\7y\2\2\u0135\u0136\5P)\2\u0136\u0137\7z\2\2\u0137/\3")
        buf.write("\2\2\2\u0138\u0139\7\6\2\2\u0139\u013a\5\22\n\2\u013a")
        buf.write("\u0143\7}\2\2\u013b\u0140\5\24\13\2\u013c\u013d\7\u0080")
        buf.write("\2\2\u013d\u013f\5\24\13\2\u013e\u013c\3\2\2\2\u013f\u0142")
        buf.write("\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u013b\3\2\2\2")
        buf.write("\u0143\u0144\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\7")
        buf.write("~\2\2\u0146\u0147\7\177\2\2\u0147\61\3\2\2\2\u0148\u0149")
        buf.write("\7\37\2\2\u0149\u014b\7}\2\2\u014a\u014c\5:\36\2\u014b")
        buf.write("\u014a\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\3\2\2\2")
        buf.write("\u014d\u014f\7~\2\2\u014e\u0150\t\3\2\2\u014f\u014e\3")
        buf.write("\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0158")
        buf.write("\5\64\33\2\u0152\u0153\79\2\2\u0153\u0155\7{\2\2\u0154")
        buf.write("\u0156\5X-\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0159\7|\2\2\u0158\u0152\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\u0160\3\2\2\2\u015a\u015b\7")
        buf.write(":\2\2\u015b\u015d\7{\2\2\u015c\u015e\5X-\2\u015d\u015c")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0161\7|\2\2\u0160\u015a\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u0163\5> \2\u0163\63\3\2\2")
        buf.write("\2\u0164\u0165\7@\2\2\u0165\u0167\5P)\2\u0166\u0164\3")
        buf.write("\2\2\2\u0166\u0167\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0169")
        buf.write("\7>\2\2\u0169\u016b\5P)\2\u016a\u0168\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u016d\3\2\2\2\u016c\u016e\7!\2\2\u016d")
        buf.write("\u016c\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0170\3\2\2\2")
        buf.write("\u016f\u0171\7\"\2\2\u0170\u016f\3\2\2\2\u0170\u0171\3")
        buf.write("\2\2\2\u0171\u0174\3\2\2\2\u0172\u0173\7V\2\2\u0173\u0175")
        buf.write("\5P)\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0178")
        buf.write("\3\2\2\2\u0176\u0177\7J\2\2\u0177\u0179\5P)\2\u0178\u0176")
        buf.write("\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u01bd\3\2\2\2\u017a")
        buf.write("\u017c\7!\2\2\u017b\u017a\3\2\2\2\u017b\u017c\3\2\2\2")
        buf.write("\u017c\u017e\3\2\2\2\u017d\u017f\7\"\2\2\u017e\u017d\3")
        buf.write("\2\2\2\u017e\u017f\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u0181")
        buf.write("\7@\2\2\u0181\u0183\5P)\2\u0182\u0180\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0186\3\2\2\2\u0184\u0185\7>\2\2\u0185")
        buf.write("\u0187\5P)\2\u0186\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u018a\3\2\2\2\u0188\u0189\7V\2\2\u0189\u018b\5P)\2\u018a")
        buf.write("\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018e\3\2\2\2")
        buf.write("\u018c\u018d\7J\2\2\u018d\u018f\5P)\2\u018e\u018c\3\2")
        buf.write("\2\2\u018e\u018f\3\2\2\2\u018f\u01bd\3\2\2\2\u0190\u0191")
        buf.write("\7@\2\2\u0191\u0193\5P)\2\u0192\u0190\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0195\7V\2\2\u0195")
        buf.write("\u0197\5P)\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197")
        buf.write("\u0199\3\2\2\2\u0198\u019a\7!\2\2\u0199\u0198\3\2\2\2")
        buf.write("\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b\u019d\7")
        buf.write("\"\2\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u01a0")
        buf.write("\3\2\2\2\u019e\u019f\7>\2\2\u019f\u01a1\5P)\2\u01a0\u019e")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2")
        buf.write("\u01a3\7J\2\2\u01a3\u01a5\5P)\2\u01a4\u01a2\3\2\2\2\u01a4")
        buf.write("\u01a5\3\2\2\2\u01a5\u01bd\3\2\2\2\u01a6\u01a7\7@\2\2")
        buf.write("\u01a7\u01a9\5P)\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2")
        buf.write("\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01ab\7V\2\2\u01ab\u01ad")
        buf.write("\5P)\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01b0")
        buf.write("\3\2\2\2\u01ae\u01af\7>\2\2\u01af\u01b1\5P)\2\u01b0\u01ae")
        buf.write("\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2")
        buf.write("\u01b4\7!\2\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2")
        buf.write("\u01b4\u01b6\3\2\2\2\u01b5\u01b7\7\"\2\2\u01b6\u01b5\3")
        buf.write("\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b9")
        buf.write("\7J\2\2\u01b9\u01bb\5P)\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u0166\3\2\2\2\u01bc")
        buf.write("\u017b\3\2\2\2\u01bc\u0192\3\2\2\2\u01bc\u01a8\3\2\2\2")
        buf.write("\u01bd\65\3\2\2\2\u01be\u01bf\t\4\2\2\u01bf\67\3\2\2\2")
        buf.write("\u01c0\u01c5\7F\2\2\u01c1\u01c5\7)\2\2\u01c2\u01c3\7-")
        buf.write("\2\2\u01c3\u01c5\5\22\n\2\u01c4\u01c0\3\2\2\2\u01c4\u01c1")
        buf.write("\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6")
        buf.write("\u01c8\7}\2\2\u01c7\u01c9\5:\36\2\u01c8\u01c7\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\7")
        buf.write("~\2\2\u01cb\u01cd\t\3\2\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd")
        buf.write("\3\2\2\2\u01cd\u01cf\3\2\2\2\u01ce\u01d0\5\66\34\2\u01cf")
        buf.write("\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\3\2\2\2")
        buf.write("\u01d1\u01d8\5\64\33\2\u01d2\u01d3\79\2\2\u01d3\u01d5")
        buf.write("\7{\2\2\u01d4\u01d6\5X-\2\u01d5\u01d4\3\2\2\2\u01d5\u01d6")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d9\7|\2\2\u01d8")
        buf.write("\u01d2\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01e0\3\2\2\2")
        buf.write("\u01da\u01db\7:\2\2\u01db\u01dd\7{\2\2\u01dc\u01de\5X")
        buf.write("-\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df")
        buf.write("\3\2\2\2\u01df\u01e1\7|\2\2\u01e0\u01da\3\2\2\2\u01e0")
        buf.write("\u01e1\3\2\2\2\u01e1\u01ea\3\2\2\2\u01e2\u01e3\7H\2\2")
        buf.write("\u01e3\u01e4\7}\2\2\u01e4\u01e6\5\24\13\2\u01e5\u01e7")
        buf.write("\5\22\n\2\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01e8\3\2\2\2\u01e8\u01e9\7~\2\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01e2\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3")
        buf.write("\2\2\2\u01ec\u01ed\5> \2\u01ed9\3\2\2\2\u01ee\u01f3\5")
        buf.write("<\37\2\u01ef\u01f0\7\u0080\2\2\u01f0\u01f2\5<\37\2\u01f1")
        buf.write("\u01ef\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2")
        buf.write("\u01f3\u01f4\3\2\2\2\u01f4;\3\2\2\2\u01f5\u01f3\3\2\2")
        buf.write("\2\u01f6\u01f7\5\24\13\2\u01f7\u01f8\5\22\n\2\u01f8=\3")
        buf.write("\2\2\2\u01f9\u01fe\7y\2\2\u01fa\u01fd\5B\"\2\u01fb\u01fd")
        buf.write("\5H%\2\u01fc\u01fa\3\2\2\2\u01fc\u01fb\3\2\2\2\u01fd\u0200")
        buf.write("\3\2\2\2\u01fe\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff")
        buf.write("\u0201\3\2\2\2\u0200\u01fe\3\2\2\2\u0201\u0202\5@!\2\u0202")
        buf.write("\u0203\7z\2\2\u0203?\3\2\2\2\u0204\u0206\7G\2\2\u0205")
        buf.write("\u0207\5P)\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\u0209\7\177\2\2\u0209A\3\2\2\2\u020a")
        buf.write("\u020b\5\24\13\2\u020b\u020e\5\22\n\2\u020c\u020d\7o\2")
        buf.write("\2\u020d\u020f\5P)\2\u020e\u020c\3\2\2\2\u020e\u020f\3")
        buf.write("\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211\7\177\2\2\u0211")
        buf.write("C\3\2\2\2\u0212\u0213\7Z\2\2\u0213\u0214\5\22\n\2\u0214")
        buf.write("\u0217\7*\2\2\u0215\u0218\5\24\13\2\u0216\u0218\7t\2\2")
        buf.write("\u0217\u0215\3\2\2\2\u0217\u0216\3\2\2\2\u0218\u0219\3")
        buf.write("\2\2\2\u0219\u021a\7\177\2\2\u021aE\3\2\2\2\u021b\u021c")
        buf.write("\5\24\13\2\u021c\u021d\5\22\n\2\u021d\u021e\7o\2\2\u021e")
        buf.write("\u021f\5P)\2\u021f\u0225\3\2\2\2\u0220\u0221\5\22\n\2")
        buf.write("\u0221\u0222\7o\2\2\u0222\u0223\5P)\2\u0223\u0225\3\2")
        buf.write("\2\2\u0224\u021b\3\2\2\2\u0224\u0220\3\2\2\2\u0225G\3")
        buf.write("\2\2\2\u0226\u022a\7y\2\2\u0227\u0229\5H%\2\u0228\u0227")
        buf.write("\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c\u022a\3\2\2\2")
        buf.write("\u022d\u0304\7z\2\2\u022e\u022f\5L\'\2\u022f\u0230\7\u0081")
        buf.write("\2\2\u0230\u0231\7E\2\2\u0231\u0232\7}\2\2\u0232\u0233")
        buf.write("\5P)\2\u0233\u0234\7~\2\2\u0234\u0235\7\177\2\2\u0235")
        buf.write("\u0304\3\2\2\2\u0236\u0237\5L\'\2\u0237\u0238\7\u0081")
        buf.write("\2\2\u0238\u0239\7=\2\2\u0239\u023a\7}\2\2\u023a\u023b")
        buf.write("\7~\2\2\u023b\u023c\7\177\2\2\u023c\u0304\3\2\2\2\u023d")
        buf.write("\u023e\7$\2\2\u023e\u023f\7}\2\2\u023f\u0242\5L\'\2\u0240")
        buf.write("\u0241\7\u0080\2\2\u0241\u0243\5P)\2\u0242\u0240\3\2\2")
        buf.write("\2\u0242\u0243\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245")
        buf.write("\7~\2\2\u0245\u0246\7\177\2\2\u0246\u0304\3\2\2\2\u0247")
        buf.write("\u0248\7\24\2\2\u0248\u024b\5P)\2\u0249\u024a\7\u0080")
        buf.write("\2\2\u024a\u024c\7`\2\2\u024b\u0249\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\7\177\2\2\u024e")
        buf.write("\u0304\3\2\2\2\u024f\u0250\5L\'\2\u0250\u0251\7o\2\2\u0251")
        buf.write("\u0252\7;\2\2\u0252\u0253\5\22\n\2\u0253\u0255\7}\2\2")
        buf.write("\u0254\u0256\5X-\2\u0255\u0254\3\2\2\2\u0255\u0256\3\2")
        buf.write("\2\2\u0256\u0257\3\2\2\2\u0257\u0258\7~\2\2\u0258\u0259")
        buf.write("\7\177\2\2\u0259\u0304\3\2\2\2\u025a\u025b\5P)\2\u025b")
        buf.write("\u025c\7\u0081\2\2\u025c\u025d\7\33\2\2\u025d\u025e\7")
        buf.write("}\2\2\u025e\u025f\5X-\2\u025f\u0260\7~\2\2\u0260\u0261")
        buf.write("\7\177\2\2\u0261\u0304\3\2\2\2\u0262\u0263\7\4\2\2\u0263")
        buf.write("\u0264\5\22\n\2\u0264\u0265\7o\2\2\u0265\u0266\5P)\2\u0266")
        buf.write("\u0267\7\u0081\2\2\u0267\u0268\7\33\2\2\u0268\u0269\7")
        buf.write("}\2\2\u0269\u026a\5X-\2\u026a\u026b\7~\2\2\u026b\u026c")
        buf.write("\7\177\2\2\u026c\u0304\3\2\2\2\u026d\u026e\5L\'\2\u026e")
        buf.write("\u026f\7o\2\2\u026f\u0270\5P)\2\u0270\u0271\7\u0081\2")
        buf.write("\2\u0271\u0272\7\33\2\2\u0272\u0273\7}\2\2\u0273\u0274")
        buf.write("\5X-\2\u0274\u0275\7~\2\2\u0275\u0276\7\177\2\2\u0276")
        buf.write("\u0304\3\2\2\2\u0277\u0278\5P)\2\u0278\u0279\7\u0081\2")
        buf.write("\2\u0279\u027a\7\35\2\2\u027a\u027b\7}\2\2\u027b\u027c")
        buf.write("\5X-\2\u027c\u027d\7~\2\2\u027d\u027e\7\177\2\2\u027e")
        buf.write("\u0304\3\2\2\2\u027f\u0280\7\b\2\2\u0280\u0281\5\22\n")
        buf.write("\2\u0281\u0282\7o\2\2\u0282\u0283\5P)\2\u0283\u0284\7")
        buf.write("\u0081\2\2\u0284\u0285\7\35\2\2\u0285\u0286\7}\2\2\u0286")
        buf.write("\u0287\5X-\2\u0287\u0288\7~\2\2\u0288\u0289\7\177\2\2")
        buf.write("\u0289\u0304\3\2\2\2\u028a\u028b\5P)\2\u028b\u028c\7\u0081")
        buf.write("\2\2\u028c\u028d\7\34\2\2\u028d\u028e\7}\2\2\u028e\u028f")
        buf.write("\5X-\2\u028f\u0290\7~\2\2\u0290\u0291\7\177\2\2\u0291")
        buf.write("\u0304\3\2\2\2\u0292\u0293\7\4\2\2\u0293\u0294\5\22\n")
        buf.write("\2\u0294\u0295\7o\2\2\u0295\u0296\5P)\2\u0296\u0297\7")
        buf.write("\u0081\2\2\u0297\u0298\7\34\2\2\u0298\u0299\7}\2\2\u0299")
        buf.write("\u029a\5X-\2\u029a\u029b\7~\2\2\u029b\u029c\7\177\2\2")
        buf.write("\u029c\u0304\3\2\2\2\u029d\u029e\5L\'\2\u029e\u029f\7")
        buf.write("\u0081\2\2\u029f\u02a0\5\22\n\2\u02a0\u02a2\7}\2\2\u02a1")
        buf.write("\u02a3\5X-\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3")
        buf.write("\u02a4\3\2\2\2\u02a4\u02a5\7~\2\2\u02a5\u02a6\7\177\2")
        buf.write("\2\u02a6\u0304\3\2\2\2\u02a7\u02a8\5L\'\2\u02a8\u02a9")
        buf.write("\7o\2\2\u02a9\u02aa\5L\'\2\u02aa\u02ab\7\u0081\2\2\u02ab")
        buf.write("\u02ac\5\22\n\2\u02ac\u02ae\7}\2\2\u02ad\u02af\5X-\2\u02ae")
        buf.write("\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0\3\2\2\2")
        buf.write("\u02b0\u02b1\7~\2\2\u02b1\u02b2\7\177\2\2\u02b2\u0304")
        buf.write("\3\2\2\2\u02b3\u02b4\5L\'\2\u02b4\u02b5\7o\2\2\u02b5\u02b6")
        buf.write("\5Z.\2\u02b6\u02b7\7\177\2\2\u02b7\u0304\3\2\2\2\u02b8")
        buf.write("\u02b9\7.\2\2\u02b9\u02ba\7}\2\2\u02ba\u02bb\5P)\2\u02bb")
        buf.write("\u02bc\7~\2\2\u02bc\u02be\5H%\2\u02bd\u02bf\5J&\2\u02be")
        buf.write("\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u0304\3\2\2\2")
        buf.write("\u02c0\u02c1\7*\2\2\u02c1\u02c2\7}\2\2\u02c2\u02c7\5F")
        buf.write("$\2\u02c3\u02c4\7\u0080\2\2\u02c4\u02c6\5F$\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02ca\3\2\2\2\u02c9\u02c7\3\2\2\2")
        buf.write("\u02ca\u02cb\7\177\2\2\u02cb\u02cc\5P)\2\u02cc\u02cd\7")
        buf.write("\177\2\2\u02cd\u02ce\5P)\2\u02ce\u02cf\7\177\2\2\u02cf")
        buf.write("\u02d0\7~\2\2\u02d0\u02d1\5H%\2\u02d1\u0304\3\2\2\2\u02d2")
        buf.write("\u02d3\5\22\n\2\u02d3\u02d5\7}\2\2\u02d4\u02d6\5X-\2\u02d5")
        buf.write("\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02d8\7~\2\2\u02d8\u02d9\7\177\2\2\u02d9\u0304")
        buf.write("\3\2\2\2\u02da\u02db\7P\2\2\u02db\u02dc\7}\2\2\u02dc\u02dd")
        buf.write("\5P)\2\u02dd\u02de\7\u0080\2\2\u02de\u02df\7\'\2\2\u02df")
        buf.write("\u02e0\7\u0080\2\2\u02e0\u02e1\5P)\2\u02e1\u02e2\7~\2")
        buf.write("\2\u02e2\u02e3\7\177\2\2\u02e3\u0304\3\2\2\2\u02e4\u02e5")
        buf.write("\5P)\2\u02e5\u02e6\7\u0081\2\2\u02e6\u02e7\7U\2\2\u02e7")
        buf.write("\u02e8\7}\2\2\u02e8\u02e9\5P)\2\u02e9\u02ea\7~\2\2\u02ea")
        buf.write("\u02eb\7\177\2\2\u02eb\u0304\3\2\2\2\u02ec\u02ed\7&\2")
        buf.write("\2\u02ed\u02ee\5\22\n\2\u02ee\u02ef\7}\2\2\u02ef\u02f4")
        buf.write("\5P)\2\u02f0\u02f1\7\u0080\2\2\u02f1\u02f3\5P)\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2")
        buf.write("\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2\u02f6\u02f4\3")
        buf.write("\2\2\2\u02f7\u02f8\7~\2\2\u02f8\u02f9\7\177\2\2\u02f9")
        buf.write("\u0304\3\2\2\2\u02fa\u02fb\7I\2\2\u02fb\u02fc\7}\2\2\u02fc")
        buf.write("\u02ff\7`\2\2\u02fd\u02fe\7\u0080\2\2\u02fe\u0300\5X-")
        buf.write("\2\u02ff\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301\u0302\7~\2\2\u0302\u0304\7\177\2\2\u0303")
        buf.write("\u0226\3\2\2\2\u0303\u022e\3\2\2\2\u0303\u0236\3\2\2\2")
        buf.write("\u0303\u023d\3\2\2\2\u0303\u0247\3\2\2\2\u0303\u024f\3")
        buf.write("\2\2\2\u0303\u025a\3\2\2\2\u0303\u0262\3\2\2\2\u0303\u026d")
        buf.write("\3\2\2\2\u0303\u0277\3\2\2\2\u0303\u027f\3\2\2\2\u0303")
        buf.write("\u028a\3\2\2\2\u0303\u0292\3\2\2\2\u0303\u029d\3\2\2\2")
        buf.write("\u0303\u02a7\3\2\2\2\u0303\u02b3\3\2\2\2\u0303\u02b8\3")
        buf.write("\2\2\2\u0303\u02c0\3\2\2\2\u0303\u02d2\3\2\2\2\u0303\u02da")
        buf.write("\3\2\2\2\u0303\u02e4\3\2\2\2\u0303\u02ec\3\2\2\2\u0303")
        buf.write("\u02fa\3\2\2\2\u0304I\3\2\2\2\u0305\u0306\7%\2\2\u0306")
        buf.write("\u0307\5H%\2\u0307K\3\2\2\2\u0308\u0309\b\'\1\2\u0309")
        buf.write("\u030a\5\22\n\2\u030a\u0315\3\2\2\2\u030b\u030c\f\4\2")
        buf.write("\2\u030c\u030d\7\u0081\2\2\u030d\u0314\5\22\n\2\u030e")
        buf.write("\u030f\f\3\2\2\u030f\u0310\7{\2\2\u0310\u0311\5P)\2\u0311")
        buf.write("\u0312\7|\2\2\u0312\u0314\3\2\2\2\u0313\u030b\3\2\2\2")
        buf.write("\u0313\u030e\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3")
        buf.write("\2\2\2\u0315\u0316\3\2\2\2\u0316M\3\2\2\2\u0317\u0315")
        buf.write("\3\2\2\2\u0318\u0319\7}\2\2\u0319\u031a\5\22\n\2\u031a")
        buf.write("\u031b\7\u0080\2\2\u031b\u0320\5P)\2\u031c\u031d\7\u0080")
        buf.write("\2\2\u031d\u031f\5P)\2\u031e\u031c\3\2\2\2\u031f\u0322")
        buf.write("\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321")
        buf.write("\u0323\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0324\7~\2\2")
        buf.write("\u0324\u032e\3\2\2\2\u0325\u0326\7}\2\2\u0326\u0327\5")
        buf.write("P)\2\u0327\u0328\7\u0080\2\2\u0328\u0329\7\'\2\2\u0329")
        buf.write("\u032a\7\u0080\2\2\u032a\u032b\5P)\2\u032b\u032c\7~\2")
        buf.write("\2\u032c\u032e\3\2\2\2\u032d\u0318\3\2\2\2\u032d\u0325")
        buf.write("\3\2\2\2\u032eO\3\2\2\2\u032f\u0330\b)\1\2\u0330\u03b5")
        buf.write("\5R*\2\u0331\u0332\7}\2\2\u0332\u0333\5P)\2\u0333\u0334")
        buf.write("\7~\2\2\u0334\u03b5\3\2\2\2\u0335\u0336\5\22\n\2\u0336")
        buf.write("\u0337\7\u0081\2\2\u0337\u0338\5\22\n\2\u0338\u033a\7")
        buf.write("}\2\2\u0339\u033b\5X-\2\u033a\u0339\3\2\2\2\u033a\u033b")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\7~\2\2\u033d")
        buf.write("\u03b5\3\2\2\2\u033e\u033f\5\22\n\2\u033f\u0341\7}\2\2")
        buf.write("\u0340\u0342\5X-\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2")
        buf.write("\2\2\u0342\u0343\3\2\2\2\u0343\u0344\7~\2\2\u0344\u03b5")
        buf.write("\3\2\2\2\u0345\u0346\7+\2\2\u0346\u0347\7}\2\2\u0347\u0348")
        buf.write("\5&\24\2\u0348\u0349\7~\2\2\u0349\u034a\7}\2\2\u034a\u034b")
        buf.write("\5P)\2\u034b\u034c\7~\2\2\u034c\u03b5\3\2\2\2\u034d\u034e")
        buf.write("\7(\2\2\u034e\u034f\7}\2\2\u034f\u0350\5&\24\2\u0350\u0351")
        buf.write("\7~\2\2\u0351\u0352\7}\2\2\u0352\u0353\5P)\2\u0353\u0354")
        buf.write("\7~\2\2\u0354\u03b5\3\2\2\2\u0355\u0356\t\5\2\2\u0356")
        buf.write("\u03b5\5P)\27\u0357\u0358\7M\2\2\u0358\u0359\7}\2\2\u0359")
        buf.write("\u035a\5P)\2\u035a\u035b\7\u0080\2\2\u035b\u035c\5P)\2")
        buf.write("\u035c\u035d\7~\2\2\u035d\u03b5\3\2\2\2\u035e\u035f\7")
        buf.write("L\2\2\u035f\u0360\7}\2\2\u0360\u0361\5P)\2\u0361\u0362")
        buf.write("\7\u0080\2\2\u0362\u0363\5P)\2\u0363\u0364\7~\2\2\u0364")
        buf.write("\u03b5\3\2\2\2\u0365\u0366\7N\2\2\u0366\u0367\7}\2\2\u0367")
        buf.write("\u0368\5P)\2\u0368\u0369\7\u0080\2\2\u0369\u036a\5P)\2")
        buf.write("\u036a\u036b\7~\2\2\u036b\u03b5\3\2\2\2\u036c\u036d\7")
        buf.write("K\2\2\u036d\u036e\7}\2\2\u036e\u036f\5P)\2\u036f\u0370")
        buf.write("\7\u0080\2\2\u0370\u0371\5P)\2\u0371\u0372\7~\2\2\u0372")
        buf.write("\u03b5\3\2\2\2\u0373\u0374\7O\2\2\u0374\u0375\7}\2\2\u0375")
        buf.write("\u0376\5P)\2\u0376\u0377\7\u0080\2\2\u0377\u0378\5P)\2")
        buf.write("\u0378\u0379\7~\2\2\u0379\u03b5\3\2\2\2\u037a\u037b\5")
        buf.write("\22\n\2\u037b\u037c\7}\2\2\u037c\u037d\5P)\2\u037d\u037e")
        buf.write("\7~\2\2\u037e\u03b5\3\2\2\2\u037f\u0380\7;\2\2\u0380\u0381")
        buf.write("\5\22\n\2\u0381\u0383\7}\2\2\u0382\u0384\5X-\2\u0383\u0382")
        buf.write("\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385")
        buf.write("\u0386\7~\2\2\u0386\u03b5\3\2\2\2\u0387\u0388\5\22\n\2")
        buf.write("\u0388\u0389\7\u0081\2\2\u0389\u038a\7\22\2\2\u038a\u038b")
        buf.write("\7}\2\2\u038b\u038c\7;\2\2\u038c\u038d\5\22\n\2\u038d")
        buf.write("\u038f\7}\2\2\u038e\u0390\5X-\2\u038f\u038e\3\2\2\2\u038f")
        buf.write("\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392\7~\2\2")
        buf.write("\u0392\u0393\7~\2\2\u0393\u03b5\3\2\2\2\u0394\u0395\7")
        buf.write("\63\2\2\u0395\u0396\7}\2\2\u0396\u0397\5P)\2\u0397\u0398")
        buf.write("\7\u0080\2\2\u0398\u0399\5P)\2\u0399\u039a\7\u0080\2\2")
        buf.write("\u039a\u039b\5P)\2\u039b\u039c\7~\2\2\u039c\u03b5\3\2")
        buf.write("\2\2\u039d\u039e\7#\2\2\u039e\u039f\7}\2\2\u039f\u03a0")
        buf.write("\5\24\13\2\u03a0\u03a1\7~\2\2\u03a1\u03b5\3\2\2\2\u03a2")
        buf.write("\u03a8\5N(\2\u03a3\u03a4\7\u0082\2\2\u03a4\u03a5\7\u0082")
        buf.write("\2\2\u03a5\u03a7\5N(\2\u03a6\u03a3\3\2\2\2\u03a7\u03aa")
        buf.write("\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write("\u03ab\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab\u03ac\7\u0082")
        buf.write("\2\2\u03ac\u03ad\7\u0082\2\2\u03ad\u03ae\5R*\2\u03ae\u03b5")
        buf.write("\3\2\2\2\u03af\u03b0\7<\2\2\u03b0\u03b1\7}\2\2\u03b1\u03b2")
        buf.write("\5P)\2\u03b2\u03b3\7~\2\2\u03b3\u03b5\3\2\2\2\u03b4\u032f")
        buf.write("\3\2\2\2\u03b4\u0331\3\2\2\2\u03b4\u0335\3\2\2\2\u03b4")
        buf.write("\u033e\3\2\2\2\u03b4\u0345\3\2\2\2\u03b4\u034d\3\2\2\2")
        buf.write("\u03b4\u0355\3\2\2\2\u03b4\u0357\3\2\2\2\u03b4\u035e\3")
        buf.write("\2\2\2\u03b4\u0365\3\2\2\2\u03b4\u036c\3\2\2\2\u03b4\u0373")
        buf.write("\3\2\2\2\u03b4\u037a\3\2\2\2\u03b4\u037f\3\2\2\2\u03b4")
        buf.write("\u0387\3\2\2\2\u03b4\u0394\3\2\2\2\u03b4\u039d\3\2\2\2")
        buf.write("\u03b4\u03a2\3\2\2\2\u03b4\u03af\3\2\2\2\u03b5\u03e7\3")
        buf.write("\2\2\2\u03b6\u03b7\f\26\2\2\u03b7\u03b8\t\6\2\2\u03b8")
        buf.write("\u03e6\5P)\27\u03b9\u03ba\f\22\2\2\u03ba\u03bb\t\7\2\2")
        buf.write("\u03bb\u03e6\5P)\23\u03bc\u03bd\f\17\2\2\u03bd\u03be\t")
        buf.write("\b\2\2\u03be\u03e6\5P)\20\u03bf\u03c0\f\16\2\2\u03c0\u03c1")
        buf.write("\t\t\2\2\u03c1\u03e6\5P)\17\u03c2\u03c3\f\r\2\2\u03c3")
        buf.write("\u03c4\7c\2\2\u03c4\u03e6\5P)\16\u03c5\u03c6\f\f\2\2\u03c6")
        buf.write("\u03c7\7d\2\2\u03c7\u03e6\5P)\r\u03c8\u03c9\f\13\2\2\u03c9")
        buf.write("\u03ca\t\n\2\2\u03ca\u03e6\5P)\f\u03cb\u03cc\f\35\2\2")
        buf.write("\u03cc\u03cd\7\u0081\2\2\u03cd\u03e6\5\22\n\2\u03ce\u03cf")
        buf.write("\f\34\2\2\u03cf\u03d0\7{\2\2\u03d0\u03d1\5P)\2\u03d1\u03d2")
        buf.write("\7|\2\2\u03d2\u03e6\3\2\2\2\u03d3\u03d4\f\33\2\2\u03d4")
        buf.write("\u03d5\7\u0081\2\2\u03d5\u03d6\7\67\2\2\u03d6\u03d7\7")
        buf.write("}\2\2\u03d7\u03e6\7~\2\2\u03d8\u03d9\f\n\2\2\u03d9\u03da")
        buf.write("\7e\2\2\u03da\u03e2\5P)\2\u03db\u03dc\7\u0080\2\2\u03dc")
        buf.write("\u03dd\5P)\2\u03dd\u03de\7e\2\2\u03de\u03df\5P)\2\u03df")
        buf.write("\u03e1\3\2\2\2\u03e0\u03db\3\2\2\2\u03e1\u03e4\3\2\2\2")
        buf.write("\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e6\3")
        buf.write("\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\u03b6\3\2\2\2\u03e5\u03b9")
        buf.write("\3\2\2\2\u03e5\u03bc\3\2\2\2\u03e5\u03bf\3\2\2\2\u03e5")
        buf.write("\u03c2\3\2\2\2\u03e5\u03c5\3\2\2\2\u03e5\u03c8\3\2\2\2")
        buf.write("\u03e5\u03cb\3\2\2\2\u03e5\u03ce\3\2\2\2\u03e5\u03d3\3")
        buf.write("\2\2\2\u03e5\u03d8\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5")
        buf.write("\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8Q\3\2\2\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03ea\u0415\5\22\n\2\u03eb\u0415\7[\2\2\u03ec")
        buf.write("\u0415\7\25\2\2\u03ed\u0415\7Q\2\2\u03ee\u0415\7W\2\2")
        buf.write("\u03ef\u0415\7X\2\2\u03f0\u0415\7\26\2\2\u03f1\u0415\7")
        buf.write("\27\2\2\u03f2\u0415\7\30\2\2\u03f3\u0415\7\31\2\2\u03f4")
        buf.write("\u0415\7\32\2\2\u03f5\u0415\78\2\2\u03f6\u0415\7\61\2")
        buf.write("\2\u03f7\u0415\7\62\2\2\u03f8\u0415\7Y\2\2\u03f9\u03fa")
        buf.write("\7;\2\2\u03fa\u03fb\7}\2\2\u03fb\u03fc\5\22\n\2\u03fc")
        buf.write("\u03fd\7~\2\2\u03fd\u0415\3\2\2\2\u03fe\u03ff\7;\2\2\u03ff")
        buf.write("\u0400\7}\2\2\u0400\u0401\7\25\2\2\u0401\u0415\7~\2\2")
        buf.write("\u0402\u0403\7;\2\2\u0403\u0404\7}\2\2\u0404\u0405\78")
        buf.write("\2\2\u0405\u0415\7~\2\2\u0406\u0415\7]\2\2\u0407\u0415")
        buf.write("\7^\2\2\u0408\u0415\7_\2\2\u0409\u0415\7`\2\2\u040a\u0415")
        buf.write("\7T\2\2\u040b\u040c\7\3\2\2\u040c\u040d\7}\2\2\u040d\u040e")
        buf.write("\7T\2\2\u040e\u0415\7~\2\2\u040f\u0410\7\3\2\2\u0410\u0411")
        buf.write("\7}\2\2\u0411\u0412\5\22\n\2\u0412\u0413\7~\2\2\u0413")
        buf.write("\u0415\3\2\2\2\u0414\u03ea\3\2\2\2\u0414\u03eb\3\2\2\2")
        buf.write("\u0414\u03ec\3\2\2\2\u0414\u03ed\3\2\2\2\u0414\u03ee\3")
        buf.write("\2\2\2\u0414\u03ef\3\2\2\2\u0414\u03f0\3\2\2\2\u0414\u03f1")
        buf.write("\3\2\2\2\u0414\u03f2\3\2\2\2\u0414\u03f3\3\2\2\2\u0414")
        buf.write("\u03f4\3\2\2\2\u0414\u03f5\3\2\2\2\u0414\u03f6\3\2\2\2")
        buf.write("\u0414\u03f7\3\2\2\2\u0414\u03f8\3\2\2\2\u0414\u03f9\3")
        buf.write("\2\2\2\u0414\u03fe\3\2\2\2\u0414\u0402\3\2\2\2\u0414\u0406")
        buf.write("\3\2\2\2\u0414\u0407\3\2\2\2\u0414\u0408\3\2\2\2\u0414")
        buf.write("\u0409\3\2\2\2\u0414\u040a\3\2\2\2\u0414\u040b\3\2\2\2")
        buf.write("\u0414\u040f\3\2\2\2\u0415S\3\2\2\2\u0416\u0417\5Z.\2")
        buf.write("\u0417\u0418\7\u0080\2\2\u0418\u0421\3\2\2\2\u0419\u041c")
        buf.write("\5Z.\2\u041a\u041b\7\u0080\2\2\u041b\u041d\5Z.\2\u041c")
        buf.write("\u041a\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041c\3\2\2\2")
        buf.write("\u041e\u041f\3\2\2\2\u041f\u0421\3\2\2\2\u0420\u0416\3")
        buf.write("\2\2\2\u0420\u0419\3\2\2\2\u0421U\3\2\2\2\u0422\u0423")
        buf.write("\5\22\n\2\u0423\u0424\7o\2\2\u0424\u0425\5Z.\2\u0425\u0426")
        buf.write("\7\u0080\2\2\u0426\u0434\3\2\2\2\u0427\u0428\5\22\n\2")
        buf.write("\u0428\u0429\7o\2\2\u0429\u042f\5Z.\2\u042a\u042b\7\u0080")
        buf.write("\2\2\u042b\u042c\5\22\n\2\u042c\u042d\7o\2\2\u042d\u042e")
        buf.write("\5Z.\2\u042e\u0430\3\2\2\2\u042f\u042a\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432")
        buf.write("\u0434\3\2\2\2\u0433\u0422\3\2\2\2\u0433\u0427\3\2\2\2")
        buf.write("\u0434W\3\2\2\2\u0435\u043a\5Z.\2\u0436\u0437\7\u0080")
        buf.write("\2\2\u0437\u0439\5Z.\2\u0438\u0436\3\2\2\2\u0439\u043c")
        buf.write("\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("Y\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u043e\5P)\2\u043e")
        buf.write("[\3\2\2\2k_amqt~\u0082\u0088\u008c\u0092\u009c\u00a4\u00a8")
        buf.write("\u00ad\u00c0\u00cd\u00d4\u00dc\u00eb\u00f8\u0102\u0113")
        buf.write("\u011c\u0126\u0140\u0143\u014b\u014f\u0155\u0158\u015d")
        buf.write("\u0160\u0166\u016a\u016d\u0170\u0174\u0178\u017b\u017e")
        buf.write("\u0182\u0186\u018a\u018e\u0192\u0196\u0199\u019c\u01a0")
        buf.write("\u01a4\u01a8\u01ac\u01b0\u01b3\u01b6\u01ba\u01bc\u01c4")
        buf.write("\u01c8\u01cc\u01cf\u01d5\u01d8\u01dd\u01e0\u01e6\u01ea")
        buf.write("\u01f3\u01fc\u01fe\u0206\u020e\u0217\u0224\u022a\u0242")
        buf.write("\u024b\u0255\u02a2\u02ae\u02be\u02c7\u02d5\u02f4\u02ff")
        buf.write("\u0303\u0313\u0315\u0320\u032d\u033a\u0341\u0383\u038f")
        buf.write("\u03a8\u03b4\u03e2\u03e5\u03e7\u0414\u041e\u0420\u0431")
        buf.write("\u0433\u043a")
        return buf.getvalue()


class CelestialParser ( Parser ):

    grammarFileName = "CelestialParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'address'", "'bool'", "'enum'", "'event'", 
                     "'eventlog'", "'uint'", "'uint8'", "'inst_map'", "'int'", 
                     "'string'", "'contract'", "'mapping'", "'bytes'", "'bytes20'", 
                     "'bytes32'", "'add'", "'as'", "'assert'", "'balance'", 
                     "'block.coinbase'", "'block.difficulty'", "'block.gaslimit'", 
                     "'block.number'", "'block.timestamp'", "'call'", "'call_bool'", 
                     "'call_uint'", "'constant'", "'constructor'", "'contains'", 
                     "'credit'", "'debit'", "'default'", "'delete'", "'else'", 
                     "'emit'", "'eTransfer'", "'exists'", "'fallback'", 
                     "'for'", "'forall'", "'from'", "'function'", "'if'", 
                     "'import'", "'in'", "'int_min'", "'int_max'", "'ite'", 
                     "'invariant'", "'keys'", "'lemma'", "'length'", "'log'", 
                     "'modifies'", "'modifies_addresses'", "'new'", "'payable'", 
                     "'pop'", "'post'", "'pragma'", "'pre'", "'print'", 
                     "'private'", "'public'", "'pure'", "'push'", "'receive'", 
                     "'return'", "'returns'", "'revert'", "'r_reverts'", 
                     "'safe_add'", "'safe_div'", "'safe_mod'", "'safe_mul'", 
                     "'safe_sub'", "'send'", "'sender'", "'spec'", "'struct'", 
                     "'this'", "'transfer'", "'tx_reverts'", "'tx.gasprice'", 
                     "'tx.origin'", "'uint_max'", "'using'", "'value'", 
                     "'view'", "<INVALID>", "<INVALID>", "'null'", "<INVALID>", 
                     "<INVALID>", "'!'", "'&&'", "'||'", "'=>'", "'==>'", 
                     "'<==>'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", 
                     "'->'", "'='", "'+='", "'-='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "'~'", "'{'", "'}'", "'['", "']'", 
                     "'('", "')'", "';'", "','", "'.'", "':'" ]

    symbolicNames = [ "<INVALID>", "ADDR", "BOOL", "ENUM", "EVENT", "EVENTLOG", 
                      "UINT", "UINT8", "INSTMAP", "INT", "STRING", "CONTRACT", 
                      "MAP", "BYTES", "BYTES20", "BYTES32", "ADD", "AS", 
                      "ASSERT", "BALANCE", "BCOINBASE", "BDIFF", "BGASLIMIT", 
                      "BNUMBER", "BTIMESTAMP", "CALL", "CALLBOOL", "CALLUINT", 
                      "CONSTANT", "CONSTR", "CONTAINS", "CREDIT", "DEBIT", 
                      "DEFAULT", "DELETE", "ELSE", "EMIT", "ETRANSFER", 
                      "EXISTS", "FALLBACK", "FOR", "FORALL", "FROM", "FUNCTION", 
                      "IF", "IMPORT", "IN", "INT_MIN", "INT_MAX", "ITE", 
                      "INVARIANT", "KEYS", "LEMMA", "LENGTH", "LOG", "MODIFIES", 
                      "MODIFIESA", "NEW", "PAYABLE", "POP", "POST", "PRAGMA", 
                      "PRE", "PRINT", "PRIVATE", "PUBLIC", "PURE", "PUSH", 
                      "RECEIVE", "RETURN", "RETURNS", "REVERT", "RREVERTS", 
                      "SAFEADD", "SAFEDIV", "SAFEMOD", "SAFEMUL", "SAFESUB", 
                      "SEND", "SENDER", "SPEC", "STRUCT", "THIS", "TRANSFER", 
                      "TXREVERTS", "TXGASPRICE", "TXORIGIN", "UINT_MAX", 
                      "USING", "VALUE", "VIEW", "BoolLiteral", "IntLiteral", 
                      "NullLiteral", "StringLiteral", "VersionLiteral", 
                      "LNOT", "LAND", "LOR", "MAPUPD", "IMPL", "BIMPL", 
                      "EQ", "NE", "LE", "GE", "LT", "GT", "RARROW", "ASSIGN", 
                      "INSERT", "REMOVE", "PLUS", "SUB", "MUL", "DIV", "MOD", 
                      "CARET", "BNOT", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "LPAREN", "RPAREN", "SEMI", "COMMA", "DOT", "COLON", 
                      "Iden", "Whitespace", "BlockComment", "LineComment" ]

    RULE_program = 0
    RULE_pragmaDirective = 1
    RULE_pragmaValue = 2
    RULE_version = 3
    RULE_versionConstraint = 4
    RULE_versionOperator = 5
    RULE_importDirective = 6
    RULE_importDeclaration = 7
    RULE_iden = 8
    RULE_datatype = 9
    RULE_idenTypeList = 10
    RULE_idenType = 11
    RULE_contractDecl = 12
    RULE_contractBody = 13
    RULE_contractContents = 14
    RULE_enumDecl = 15
    RULE_structDecl = 16
    RULE_funDecl = 17
    RULE_funParamList = 18
    RULE_funParam = 19
    RULE_functionBody = 20
    RULE_invariantDecl = 21
    RULE_invariantBody = 22
    RULE_eventDecl = 23
    RULE_constructorDecl = 24
    RULE_spec = 25
    RULE_stateMutability = 26
    RULE_methodDecl = 27
    RULE_methodParamList = 28
    RULE_methodParam = 29
    RULE_methodBody = 30
    RULE_returnStatement = 31
    RULE_varDecl = 32
    RULE_usingForDecl = 33
    RULE_loopVarDecl = 34
    RULE_statement = 35
    RULE_elseStatement = 36
    RULE_lvalue = 37
    RULE_logcheck = 38
    RULE_expr = 39
    RULE_primitive = 40
    RULE_unnamedTupleBody = 41
    RULE_namedTupleBody = 42
    RULE_rvalueList = 43
    RULE_rvalue = 44

    ruleNames =  [ "program", "pragmaDirective", "pragmaValue", "version", 
                   "versionConstraint", "versionOperator", "importDirective", 
                   "importDeclaration", "iden", "datatype", "idenTypeList", 
                   "idenType", "contractDecl", "contractBody", "contractContents", 
                   "enumDecl", "structDecl", "funDecl", "funParamList", 
                   "funParam", "functionBody", "invariantDecl", "invariantBody", 
                   "eventDecl", "constructorDecl", "spec", "stateMutability", 
                   "methodDecl", "methodParamList", "methodParam", "methodBody", 
                   "returnStatement", "varDecl", "usingForDecl", "loopVarDecl", 
                   "statement", "elseStatement", "lvalue", "logcheck", "expr", 
                   "primitive", "unnamedTupleBody", "namedTupleBody", "rvalueList", 
                   "rvalue" ]

    EOF = Token.EOF
    ADDR=1
    BOOL=2
    ENUM=3
    EVENT=4
    EVENTLOG=5
    UINT=6
    UINT8=7
    INSTMAP=8
    INT=9
    STRING=10
    CONTRACT=11
    MAP=12
    BYTES=13
    BYTES20=14
    BYTES32=15
    ADD=16
    AS=17
    ASSERT=18
    BALANCE=19
    BCOINBASE=20
    BDIFF=21
    BGASLIMIT=22
    BNUMBER=23
    BTIMESTAMP=24
    CALL=25
    CALLBOOL=26
    CALLUINT=27
    CONSTANT=28
    CONSTR=29
    CONTAINS=30
    CREDIT=31
    DEBIT=32
    DEFAULT=33
    DELETE=34
    ELSE=35
    EMIT=36
    ETRANSFER=37
    EXISTS=38
    FALLBACK=39
    FOR=40
    FORALL=41
    FROM=42
    FUNCTION=43
    IF=44
    IMPORT=45
    IN=46
    INT_MIN=47
    INT_MAX=48
    ITE=49
    INVARIANT=50
    KEYS=51
    LEMMA=52
    LENGTH=53
    LOG=54
    MODIFIES=55
    MODIFIESA=56
    NEW=57
    PAYABLE=58
    POP=59
    POST=60
    PRAGMA=61
    PRE=62
    PRINT=63
    PRIVATE=64
    PUBLIC=65
    PURE=66
    PUSH=67
    RECEIVE=68
    RETURN=69
    RETURNS=70
    REVERT=71
    RREVERTS=72
    SAFEADD=73
    SAFEDIV=74
    SAFEMOD=75
    SAFEMUL=76
    SAFESUB=77
    SEND=78
    SENDER=79
    SPEC=80
    STRUCT=81
    THIS=82
    TRANSFER=83
    TXREVERTS=84
    TXGASPRICE=85
    TXORIGIN=86
    UINT_MAX=87
    USING=88
    VALUE=89
    VIEW=90
    BoolLiteral=91
    IntLiteral=92
    NullLiteral=93
    StringLiteral=94
    VersionLiteral=95
    LNOT=96
    LAND=97
    LOR=98
    MAPUPD=99
    IMPL=100
    BIMPL=101
    EQ=102
    NE=103
    LE=104
    GE=105
    LT=106
    GT=107
    RARROW=108
    ASSIGN=109
    INSERT=110
    REMOVE=111
    PLUS=112
    SUB=113
    MUL=114
    DIV=115
    MOD=116
    CARET=117
    BNOT=118
    LBRACE=119
    RBRACE=120
    LBRACK=121
    RBRACK=122
    LPAREN=123
    RPAREN=124
    SEMI=125
    COMMA=126
    DOT=127
    COLON=128
    Iden=129
    Whitespace=130
    BlockComment=131
    LineComment=132

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CelestialParser.EOF, 0)

        def contractDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ContractDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ContractDeclContext,i)


        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(CelestialParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ImportDirectiveContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = CelestialParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 95
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.CONTRACT) | (1 << CelestialParser.IMPORT) | (1 << CelestialParser.PRAGMA))) != 0):
                self.state = 93
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CelestialParser.CONTRACT]:
                    self.state = 90
                    self.contractDecl()
                    pass
                elif token in [CelestialParser.PRAGMA]:
                    self.state = 91
                    self.pragmaDirective()
                    pass
                elif token in [CelestialParser.IMPORT]:
                    self.state = 92
                    self.importDirective()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 97
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 98
            self.match(CelestialParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pragmaName = None # IdenContext

        def PRAGMA(self):
            return self.getToken(CelestialParser.PRAGMA, 0)

        def pragmaValue(self):
            return self.getTypedRuleContext(CelestialParser.PragmaValueContext,0)


        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = CelestialParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 100
            self.match(CelestialParser.PRAGMA)
            self.state = 101
            localctx.pragmaName = self.iden()
            self.state = 102
            self.pragmaValue()
            self.state = 103
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(CelestialParser.VersionContext,0)


        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = CelestialParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaValue)
        try:
            self.state = 107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.VersionLiteral, CelestialParser.LE, CelestialParser.GE, CelestialParser.LT, CelestialParser.GT, CelestialParser.ASSIGN, CelestialParser.CARET, CelestialParser.BNOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 105
                self.version()
                pass
            elif token in [CelestialParser.ADDR, CelestialParser.BALANCE, CelestialParser.BCOINBASE, CelestialParser.BDIFF, CelestialParser.BGASLIMIT, CelestialParser.BNUMBER, CelestialParser.BTIMESTAMP, CelestialParser.DEFAULT, CelestialParser.EXISTS, CelestialParser.FORALL, CelestialParser.INT_MIN, CelestialParser.INT_MAX, CelestialParser.ITE, CelestialParser.LOG, CelestialParser.NEW, CelestialParser.PAYABLE, CelestialParser.SAFEADD, CelestialParser.SAFEDIV, CelestialParser.SAFEMOD, CelestialParser.SAFEMUL, CelestialParser.SAFESUB, CelestialParser.SENDER, CelestialParser.THIS, CelestialParser.TXGASPRICE, CelestialParser.TXORIGIN, CelestialParser.UINT_MAX, CelestialParser.VALUE, CelestialParser.BoolLiteral, CelestialParser.IntLiteral, CelestialParser.NullLiteral, CelestialParser.StringLiteral, CelestialParser.LNOT, CelestialParser.SUB, CelestialParser.LPAREN, CelestialParser.Iden]:
                self.enterOuterAlt(localctx, 2)
                self.state = 106
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(CelestialParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = CelestialParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 109
            self.versionConstraint()
            self.state = 111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (CelestialParser.VersionLiteral - 95)) | (1 << (CelestialParser.LE - 95)) | (1 << (CelestialParser.GE - 95)) | (1 << (CelestialParser.LT - 95)) | (1 << (CelestialParser.GT - 95)) | (1 << (CelestialParser.ASSIGN - 95)) | (1 << (CelestialParser.CARET - 95)) | (1 << (CelestialParser.BNOT - 95)))) != 0):
                self.state = 110
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(CelestialParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(CelestialParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = CelestialParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (CelestialParser.LE - 104)) | (1 << (CelestialParser.GE - 104)) | (1 << (CelestialParser.LT - 104)) | (1 << (CelestialParser.GT - 104)) | (1 << (CelestialParser.ASSIGN - 104)) | (1 << (CelestialParser.CARET - 104)) | (1 << (CelestialParser.BNOT - 104)))) != 0):
                self.state = 113
                self.versionOperator()


            self.state = 116
            self.match(CelestialParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(CelestialParser.CARET, 0)

        def BNOT(self):
            return self.getToken(CelestialParser.BNOT, 0)

        def GE(self):
            return self.getToken(CelestialParser.GE, 0)

        def GT(self):
            return self.getToken(CelestialParser.GT, 0)

        def LT(self):
            return self.getToken(CelestialParser.LT, 0)

        def LE(self):
            return self.getToken(CelestialParser.LE, 0)

        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = CelestialParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 118
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (CelestialParser.LE - 104)) | (1 << (CelestialParser.GE - 104)) | (1 << (CelestialParser.LT - 104)) | (1 << (CelestialParser.GT - 104)) | (1 << (CelestialParser.ASSIGN - 104)) | (1 << (CelestialParser.CARET - 104)) | (1 << (CelestialParser.BNOT - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(CelestialParser.IMPORT, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.StringLiteral)
            else:
                return self.getToken(CelestialParser.StringLiteral, i)

        def AS(self):
            return self.getToken(CelestialParser.AS, 0)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def FROM(self):
            return self.getToken(CelestialParser.FROM, 0)

        def MUL(self):
            return self.getToken(CelestialParser.MUL, 0)

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ImportDeclarationContext,i)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = CelestialParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 120
                self.match(CelestialParser.IMPORT)
                self.state = 122 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 121
                    self.match(CelestialParser.StringLiteral)
                    self.state = 124 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.StringLiteral):
                        break

                self.state = 128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.AS:
                    self.state = 126
                    self.match(CelestialParser.AS)
                    self.state = 127
                    self.iden()


                self.state = 130
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.match(CelestialParser.IMPORT)
                self.state = 134
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CelestialParser.MUL]:
                    self.state = 132
                    self.match(CelestialParser.MUL)
                    pass
                elif token in [CelestialParser.Iden]:
                    self.state = 133
                    self.iden()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.AS:
                    self.state = 136
                    self.match(CelestialParser.AS)
                    self.state = 137
                    self.iden()


                self.state = 140
                self.match(CelestialParser.FROM)
                self.state = 142 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 141
                    self.match(CelestialParser.StringLiteral)
                    self.state = 144 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.StringLiteral):
                        break

                self.state = 146
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 147
                self.match(CelestialParser.IMPORT)
                self.state = 148
                self.match(CelestialParser.LBRACE)
                self.state = 149
                self.importDeclaration()
                self.state = 154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 150
                    self.match(CelestialParser.COMMA)
                    self.state = 151
                    self.importDeclaration()
                    self.state = 156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 157
                self.match(CelestialParser.RBRACE)
                self.state = 158
                self.match(CelestialParser.FROM)
                self.state = 160 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 159
                    self.match(CelestialParser.StringLiteral)
                    self.state = 162 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.StringLiteral):
                        break

                self.state = 164
                self.match(CelestialParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def AS(self):
            return self.getToken(CelestialParser.AS, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = CelestialParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.iden()
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.AS:
                self.state = 169
                self.match(CelestialParser.AS)
                self.state = 170
                self.iden()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Iden(self):
            return self.getToken(CelestialParser.Iden, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_iden

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIden" ):
                listener.enterIden(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIden" ):
                listener.exitIden(self)




    def iden(self):

        localctx = CelestialParser.IdenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_iden)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(CelestialParser.Iden)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arrayType = None # DatatypeContext
            self.keyType = None # DatatypeContext
            self.valueType = None # DatatypeContext
            self.name = None # IdenContext

        def MAP(self):
            return self.getToken(CelestialParser.MAP, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def MAPUPD(self):
            return self.getToken(CelestialParser.MAPUPD, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def BOOL(self):
            return self.getToken(CelestialParser.BOOL, 0)

        def INT(self):
            return self.getToken(CelestialParser.INT, 0)

        def UINT(self):
            return self.getToken(CelestialParser.UINT, 0)

        def UINT8(self):
            return self.getToken(CelestialParser.UINT8, 0)

        def STRING(self):
            return self.getToken(CelestialParser.STRING, 0)

        def ADDR(self):
            return self.getToken(CelestialParser.ADDR, 0)

        def PAYABLE(self):
            return self.getToken(CelestialParser.PAYABLE, 0)

        def EVENTLOG(self):
            return self.getToken(CelestialParser.EVENTLOG, 0)

        def EVENT(self):
            return self.getToken(CelestialParser.EVENT, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def INSTMAP(self):
            return self.getToken(CelestialParser.INSTMAP, 0)

        def LT(self):
            return self.getToken(CelestialParser.LT, 0)

        def GT(self):
            return self.getToken(CelestialParser.GT, 0)

        def BYTES(self):
            return self.getToken(CelestialParser.BYTES, 0)

        def BYTES20(self):
            return self.getToken(CelestialParser.BYTES20, 0)

        def BYTES32(self):
            return self.getToken(CelestialParser.BYTES32, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)



    def datatype(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.DatatypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_datatype, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.MAP]:
                self.state = 176
                self.match(CelestialParser.MAP)
                self.state = 177
                self.match(CelestialParser.LPAREN)
                self.state = 178
                localctx.keyType = self.datatype(0)
                self.state = 179
                self.match(CelestialParser.MAPUPD)
                self.state = 180
                localctx.valueType = self.datatype(0)
                self.state = 181
                self.match(CelestialParser.RPAREN)
                pass
            elif token in [CelestialParser.BOOL]:
                self.state = 183
                self.match(CelestialParser.BOOL)
                pass
            elif token in [CelestialParser.INT]:
                self.state = 184
                self.match(CelestialParser.INT)
                pass
            elif token in [CelestialParser.UINT]:
                self.state = 185
                self.match(CelestialParser.UINT)
                pass
            elif token in [CelestialParser.UINT8]:
                self.state = 186
                self.match(CelestialParser.UINT8)
                pass
            elif token in [CelestialParser.STRING]:
                self.state = 187
                self.match(CelestialParser.STRING)
                pass
            elif token in [CelestialParser.ADDR]:
                self.state = 188
                self.match(CelestialParser.ADDR)
                self.state = 190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 189
                    self.match(CelestialParser.PAYABLE)


                pass
            elif token in [CelestialParser.EVENTLOG]:
                self.state = 192
                self.match(CelestialParser.EVENTLOG)
                pass
            elif token in [CelestialParser.EVENT]:
                self.state = 193
                self.match(CelestialParser.EVENT)
                pass
            elif token in [CelestialParser.Iden]:
                self.state = 194
                localctx.name = self.iden()
                pass
            elif token in [CelestialParser.INSTMAP]:
                self.state = 195
                self.match(CelestialParser.INSTMAP)
                self.state = 196
                self.match(CelestialParser.LT)
                self.state = 197
                self.iden()
                self.state = 198
                self.match(CelestialParser.GT)
                pass
            elif token in [CelestialParser.BYTES]:
                self.state = 200
                self.match(CelestialParser.BYTES)
                pass
            elif token in [CelestialParser.BYTES20]:
                self.state = 201
                self.match(CelestialParser.BYTES20)
                pass
            elif token in [CelestialParser.BYTES32]:
                self.state = 202
                self.match(CelestialParser.BYTES32)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CelestialParser.DatatypeContext(self, _parentctx, _parentState)
                    localctx.arrayType = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_datatype)
                    self.state = 205
                    if not self.precpred(self._ctx, 15):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                    self.state = 206
                    self.match(CelestialParser.LBRACK)
                    self.state = 207
                    self.match(CelestialParser.RBRACK) 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class IdenTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idenType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenTypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_idenTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdenTypeList" ):
                listener.enterIdenTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdenTypeList" ):
                listener.exitIdenTypeList(self)




    def idenTypeList(self):

        localctx = CelestialParser.IdenTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_idenTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.idenType()
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 214
                self.match(CelestialParser.COMMA)
                self.state = 215
                self.idenType()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdenTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def COLON(self):
            return self.getToken(CelestialParser.COLON, 0)

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_idenType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdenType" ):
                listener.enterIdenType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdenType" ):
                listener.exitIdenType(self)




    def idenType(self):

        localctx = CelestialParser.IdenTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_idenType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            localctx.name = self.iden()
            self.state = 222
            self.match(CelestialParser.COLON)
            self.state = 223
            self.datatype(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def CONTRACT(self):
            return self.getToken(CelestialParser.CONTRACT, 0)

        def contractBody(self):
            return self.getTypedRuleContext(CelestialParser.ContractBodyContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDecl" ):
                listener.enterContractDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDecl" ):
                listener.exitContractDecl(self)




    def contractDecl(self):

        localctx = CelestialParser.ContractDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(CelestialParser.CONTRACT)
            self.state = 226
            localctx.name = self.iden()
            self.state = 227
            self.contractBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def contractContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ContractContentsContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ContractContentsContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractBody" ):
                listener.enterContractBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractBody" ):
                listener.exitContractBody(self)




    def contractBody(self):

        localctx = CelestialParser.ContractBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_contractBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(CelestialParser.LBRACE)
            self.state = 231 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 230
                self.contractContents()
                self.state = 233 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.ENUM) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32) | (1 << CelestialParser.CONSTR) | (1 << CelestialParser.FALLBACK) | (1 << CelestialParser.FUNCTION) | (1 << CelestialParser.INVARIANT))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CelestialParser.RECEIVE - 68)) | (1 << (CelestialParser.SPEC - 68)) | (1 << (CelestialParser.STRUCT - 68)) | (1 << (CelestialParser.USING - 68)) | (1 << (CelestialParser.Iden - 68)))) != 0)):
                    break

            self.state = 235
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractContentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(CelestialParser.VarDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(CelestialParser.EnumDeclContext,0)


        def structDecl(self):
            return self.getTypedRuleContext(CelestialParser.StructDeclContext,0)


        def funDecl(self):
            return self.getTypedRuleContext(CelestialParser.FunDeclContext,0)


        def invariantDecl(self):
            return self.getTypedRuleContext(CelestialParser.InvariantDeclContext,0)


        def eventDecl(self):
            return self.getTypedRuleContext(CelestialParser.EventDeclContext,0)


        def constructorDecl(self):
            return self.getTypedRuleContext(CelestialParser.ConstructorDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(CelestialParser.MethodDeclContext,0)


        def usingForDecl(self):
            return self.getTypedRuleContext(CelestialParser.UsingForDeclContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractContents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractContents" ):
                listener.enterContractContents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractContents" ):
                listener.exitContractContents(self)




    def contractContents(self):

        localctx = CelestialParser.ContractContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_contractContents)
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.varDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.enumDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 239
                self.structDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 240
                self.funDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 241
                self.invariantDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 242
                self.eventDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 243
                self.constructorDecl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 244
                self.methodDecl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 245
                self.usingForDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def ENUM(self):
            return self.getToken(CelestialParser.ENUM, 0)

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_enumDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDecl" ):
                listener.enterEnumDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDecl" ):
                listener.exitEnumDecl(self)




    def enumDecl(self):

        localctx = CelestialParser.EnumDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(CelestialParser.ENUM)
            self.state = 249
            localctx.name = self.iden()
            self.state = 250
            self.match(CelestialParser.LBRACE)
            self.state = 251
            self.iden()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 252
                self.match(CelestialParser.COMMA)
                self.state = 253
                self.iden()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def STRUCT(self):
            return self.getToken(CelestialParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.SEMI)
            else:
                return self.getToken(CelestialParser.SEMI, i)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_structDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDecl" ):
                listener.enterStructDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDecl" ):
                listener.exitStructDecl(self)




    def structDecl(self):

        localctx = CelestialParser.StructDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_structDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(CelestialParser.STRUCT)
            self.state = 262
            localctx.name = self.iden()
            self.state = 263
            self.match(CelestialParser.LBRACE)
            self.state = 264
            self.datatype(0)
            self.state = 265
            self.iden()
            self.state = 266
            self.match(CelestialParser.SEMI)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 267
                self.datatype(0)
                self.state = 268
                self.iden()
                self.state = 269
                self.match(CelestialParser.SEMI)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CelestialParser.RULE_funDecl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FDeclContext(FunDeclContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CelestialParser.FunDeclContext
            super().__init__(parser)
            self.name = None # IdenContext
            self.copyFrom(ctx)

        def SPEC(self):
            return self.getToken(CelestialParser.SPEC, 0)
        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)
        def functionBody(self):
            return self.getTypedRuleContext(CelestialParser.FunctionBodyContext,0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)

        def funParamList(self):
            return self.getTypedRuleContext(CelestialParser.FunParamListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFDecl" ):
                listener.enterFDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFDecl" ):
                listener.exitFDecl(self)



    def funDecl(self):

        localctx = CelestialParser.FunDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_funDecl)
        self._la = 0 # Token type
        try:
            localctx = CelestialParser.FDeclContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(CelestialParser.SPEC)
            self.state = 279
            localctx.name = self.iden()
            self.state = 280
            self.match(CelestialParser.LPAREN)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 281
                self.funParamList()


            self.state = 284
            self.match(CelestialParser.RPAREN)
            self.state = 285
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.FunParamContext)
            else:
                return self.getTypedRuleContext(CelestialParser.FunParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_funParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunParamList" ):
                listener.enterFunParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunParamList" ):
                listener.exitFunParamList(self)




    def funParamList(self):

        localctx = CelestialParser.FunParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_funParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.funParam()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 288
                self.match(CelestialParser.COMMA)
                self.state = 289
                self.funParam()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_funParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunParam" ):
                listener.enterFunParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunParam" ):
                listener.exitFunParam(self)




    def funParam(self):

        localctx = CelestialParser.FunParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_funParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.datatype(0)
            self.state = 296
            localctx.name = self.iden()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = CelestialParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(CelestialParser.LBRACE)
            self.state = 299
            self.expr(0)
            self.state = 300
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InvariantDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def INVARIANT(self):
            return self.getToken(CelestialParser.INVARIANT, 0)

        def invariantBody(self):
            return self.getTypedRuleContext(CelestialParser.InvariantBodyContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_invariantDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariantDecl" ):
                listener.enterInvariantDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariantDecl" ):
                listener.exitInvariantDecl(self)




    def invariantDecl(self):

        localctx = CelestialParser.InvariantDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_invariantDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(CelestialParser.INVARIANT)
            self.state = 303
            localctx.name = self.iden()
            self.state = 304
            self.invariantBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InvariantBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_invariantBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariantBody" ):
                listener.enterInvariantBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariantBody" ):
                listener.exitInvariantBody(self)




    def invariantBody(self):

        localctx = CelestialParser.InvariantBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_invariantBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(CelestialParser.LBRACE)
            self.state = 307
            self.expr(0)
            self.state = 308
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def EVENT(self):
            return self.getToken(CelestialParser.EVENT, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_eventDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDecl" ):
                listener.enterEventDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDecl" ):
                listener.exitEventDecl(self)




    def eventDecl(self):

        localctx = CelestialParser.EventDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_eventDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(CelestialParser.EVENT)
            self.state = 311
            localctx.name = self.iden()
            self.state = 312
            self.match(CelestialParser.LPAREN)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 313
                self.datatype(0)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 314
                    self.match(CelestialParser.COMMA)
                    self.state = 315
                    self.datatype(0)
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 323
            self.match(CelestialParser.RPAREN)
            self.state = 324
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modifies = None # RvalueListContext
            self.modifies_addrs = None # RvalueListContext

        def CONSTR(self):
            return self.getToken(CelestialParser.CONSTR, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def spec(self):
            return self.getTypedRuleContext(CelestialParser.SpecContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(CelestialParser.MethodBodyContext,0)


        def methodParamList(self):
            return self.getTypedRuleContext(CelestialParser.MethodParamListContext,0)


        def MODIFIES(self):
            return self.getToken(CelestialParser.MODIFIES, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LBRACK)
            else:
                return self.getToken(CelestialParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RBRACK)
            else:
                return self.getToken(CelestialParser.RBRACK, i)

        def MODIFIESA(self):
            return self.getToken(CelestialParser.MODIFIESA, 0)

        def PUBLIC(self):
            return self.getToken(CelestialParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(CelestialParser.PRIVATE, 0)

        def rvalueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueListContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueListContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_constructorDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDecl" ):
                listener.enterConstructorDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDecl" ):
                listener.exitConstructorDecl(self)




    def constructorDecl(self):

        localctx = CelestialParser.ConstructorDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constructorDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(CelestialParser.CONSTR)
            self.state = 327
            self.match(CelestialParser.LPAREN)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 328
                self.methodParamList()


            self.state = 331
            self.match(CelestialParser.RPAREN)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC:
                self.state = 332
                _la = self._input.LA(1)
                if not(_la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 335
            self.spec()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIES:
                self.state = 336
                self.match(CelestialParser.MODIFIES)
                self.state = 337
                self.match(CelestialParser.LBRACK)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 338
                    localctx.modifies = self.rvalueList()


                self.state = 341
                self.match(CelestialParser.RBRACK)


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIESA:
                self.state = 344
                self.match(CelestialParser.MODIFIESA)
                self.state = 345
                self.match(CelestialParser.LBRACK)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 346
                    localctx.modifies_addrs = self.rvalueList()


                self.state = 349
                self.match(CelestialParser.RBRACK)


            self.state = 352
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pre = None # ExprContext
            self.post = None # ExprContext
            self.reverts = None # ExprContext
            self.rreverts = None # ExprContext

        def PRE(self):
            return self.getToken(CelestialParser.PRE, 0)

        def POST(self):
            return self.getToken(CelestialParser.POST, 0)

        def CREDIT(self):
            return self.getToken(CelestialParser.CREDIT, 0)

        def DEBIT(self):
            return self.getToken(CelestialParser.DEBIT, 0)

        def TXREVERTS(self):
            return self.getToken(CelestialParser.TXREVERTS, 0)

        def RREVERTS(self):
            return self.getToken(CelestialParser.RREVERTS, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec" ):
                listener.enterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec" ):
                listener.exitSpec(self)




    def spec(self):

        localctx = CelestialParser.SpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_spec)
        self._la = 0 # Token type
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 354
                    self.match(CelestialParser.PRE)
                    self.state = 355
                    localctx.pre = self.expr(0)


                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 358
                    self.match(CelestialParser.POST)
                    self.state = 359
                    localctx.post = self.expr(0)


                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 362
                    self.match(CelestialParser.CREDIT)


                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 365
                    self.match(CelestialParser.DEBIT)


                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 368
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 369
                    localctx.reverts = self.expr(0)


                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 372
                    self.match(CelestialParser.RREVERTS)
                    self.state = 373
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 376
                    self.match(CelestialParser.CREDIT)


                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 379
                    self.match(CelestialParser.DEBIT)


                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 382
                    self.match(CelestialParser.PRE)
                    self.state = 383
                    localctx.pre = self.expr(0)


                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 386
                    self.match(CelestialParser.POST)
                    self.state = 387
                    localctx.post = self.expr(0)


                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 390
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 391
                    localctx.reverts = self.expr(0)


                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 394
                    self.match(CelestialParser.RREVERTS)
                    self.state = 395
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 398
                    self.match(CelestialParser.PRE)
                    self.state = 399
                    localctx.pre = self.expr(0)


                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 402
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 403
                    localctx.reverts = self.expr(0)


                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 406
                    self.match(CelestialParser.CREDIT)


                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 409
                    self.match(CelestialParser.DEBIT)


                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 412
                    self.match(CelestialParser.POST)
                    self.state = 413
                    localctx.post = self.expr(0)


                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 416
                    self.match(CelestialParser.RREVERTS)
                    self.state = 417
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 420
                    self.match(CelestialParser.PRE)
                    self.state = 421
                    localctx.pre = self.expr(0)


                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 424
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 425
                    localctx.reverts = self.expr(0)


                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 428
                    self.match(CelestialParser.POST)
                    self.state = 429
                    localctx.post = self.expr(0)


                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 432
                    self.match(CelestialParser.CREDIT)


                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 435
                    self.match(CelestialParser.DEBIT)


                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 438
                    self.match(CelestialParser.RREVERTS)
                    self.state = 439
                    localctx.rreverts = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURE(self):
            return self.getToken(CelestialParser.PURE, 0)

        def CONSTANT(self):
            return self.getToken(CelestialParser.CONSTANT, 0)

        def VIEW(self):
            return self.getToken(CelestialParser.VIEW, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CelestialParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            _la = self._input.LA(1)
            if not(((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & ((1 << (CelestialParser.CONSTANT - 28)) | (1 << (CelestialParser.PURE - 28)) | (1 << (CelestialParser.VIEW - 28)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CelestialParser.RULE_methodDecl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MDeclContext(MethodDeclContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CelestialParser.MethodDeclContext
            super().__init__(parser)
            self.name = None # IdenContext
            self.modifies = None # RvalueListContext
            self.modifies_addrs = None # RvalueListContext
            self.returnval = None # IdenContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LPAREN)
            else:
                return self.getToken(CelestialParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RPAREN)
            else:
                return self.getToken(CelestialParser.RPAREN, i)
        def spec(self):
            return self.getTypedRuleContext(CelestialParser.SpecContext,0)

        def methodBody(self):
            return self.getTypedRuleContext(CelestialParser.MethodBodyContext,0)

        def RECEIVE(self):
            return self.getToken(CelestialParser.RECEIVE, 0)
        def FALLBACK(self):
            return self.getToken(CelestialParser.FALLBACK, 0)
        def FUNCTION(self):
            return self.getToken(CelestialParser.FUNCTION, 0)
        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)

        def methodParamList(self):
            return self.getTypedRuleContext(CelestialParser.MethodParamListContext,0)

        def stateMutability(self):
            return self.getTypedRuleContext(CelestialParser.StateMutabilityContext,0)

        def MODIFIES(self):
            return self.getToken(CelestialParser.MODIFIES, 0)
        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LBRACK)
            else:
                return self.getToken(CelestialParser.LBRACK, i)
        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RBRACK)
            else:
                return self.getToken(CelestialParser.RBRACK, i)
        def MODIFIESA(self):
            return self.getToken(CelestialParser.MODIFIESA, 0)
        def RETURNS(self):
            return self.getToken(CelestialParser.RETURNS, 0)
        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)

        def PUBLIC(self):
            return self.getToken(CelestialParser.PUBLIC, 0)
        def PRIVATE(self):
            return self.getToken(CelestialParser.PRIVATE, 0)
        def rvalueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueListContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMDecl" ):
                listener.enterMDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMDecl" ):
                listener.exitMDecl(self)



    def methodDecl(self):

        localctx = CelestialParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            localctx = CelestialParser.MDeclContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.RECEIVE]:
                self.state = 446
                self.match(CelestialParser.RECEIVE)
                pass
            elif token in [CelestialParser.FALLBACK]:
                self.state = 447
                self.match(CelestialParser.FALLBACK)
                pass
            elif token in [CelestialParser.FUNCTION]:
                self.state = 448
                self.match(CelestialParser.FUNCTION)
                self.state = 449
                localctx.name = self.iden()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 452
            self.match(CelestialParser.LPAREN)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 453
                self.methodParamList()


            self.state = 456
            self.match(CelestialParser.RPAREN)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC:
                self.state = 457
                _la = self._input.LA(1)
                if not(_la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & ((1 << (CelestialParser.CONSTANT - 28)) | (1 << (CelestialParser.PURE - 28)) | (1 << (CelestialParser.VIEW - 28)))) != 0):
                self.state = 460
                self.stateMutability()


            self.state = 463
            self.spec()
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIES:
                self.state = 464
                self.match(CelestialParser.MODIFIES)
                self.state = 465
                self.match(CelestialParser.LBRACK)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 466
                    localctx.modifies = self.rvalueList()


                self.state = 469
                self.match(CelestialParser.RBRACK)


            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIESA:
                self.state = 472
                self.match(CelestialParser.MODIFIESA)
                self.state = 473
                self.match(CelestialParser.LBRACK)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 474
                    localctx.modifies_addrs = self.rvalueList()


                self.state = 477
                self.match(CelestialParser.RBRACK)


            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.RETURNS:
                self.state = 480
                self.match(CelestialParser.RETURNS)
                self.state = 481
                self.match(CelestialParser.LPAREN)
                self.state = 482
                self.datatype(0)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.Iden:
                    self.state = 483
                    localctx.returnval = self.iden()


                self.state = 486
                self.match(CelestialParser.RPAREN)


            self.state = 490
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.MethodParamContext)
            else:
                return self.getTypedRuleContext(CelestialParser.MethodParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_methodParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParamList" ):
                listener.enterMethodParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParamList" ):
                listener.exitMethodParamList(self)




    def methodParamList(self):

        localctx = CelestialParser.MethodParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_methodParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.methodParam()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 493
                self.match(CelestialParser.COMMA)
                self.state = 494
                self.methodParam()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_methodParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParam" ):
                listener.enterMethodParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParam" ):
                listener.exitMethodParam(self)




    def methodParam(self):

        localctx = CelestialParser.MethodParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_methodParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.datatype(0)
            self.state = 501
            localctx.name = self.iden()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def returnStatement(self):
            return self.getTypedRuleContext(CelestialParser.ReturnStatementContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.VarDeclContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.StatementContext)
            else:
                return self.getTypedRuleContext(CelestialParser.StatementContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = CelestialParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_methodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(CelestialParser.LBRACE)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32) | (1 << CelestialParser.ASSERT) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.DELETE) | (1 << CelestialParser.EMIT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FOR) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.IF) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CelestialParser.REVERT - 71)) | (1 << (CelestialParser.SAFEADD - 71)) | (1 << (CelestialParser.SAFEDIV - 71)) | (1 << (CelestialParser.SAFEMOD - 71)) | (1 << (CelestialParser.SAFEMUL - 71)) | (1 << (CelestialParser.SAFESUB - 71)) | (1 << (CelestialParser.SEND - 71)) | (1 << (CelestialParser.SENDER - 71)) | (1 << (CelestialParser.THIS - 71)) | (1 << (CelestialParser.TXGASPRICE - 71)) | (1 << (CelestialParser.TXORIGIN - 71)) | (1 << (CelestialParser.UINT_MAX - 71)) | (1 << (CelestialParser.VALUE - 71)) | (1 << (CelestialParser.BoolLiteral - 71)) | (1 << (CelestialParser.IntLiteral - 71)) | (1 << (CelestialParser.NullLiteral - 71)) | (1 << (CelestialParser.StringLiteral - 71)) | (1 << (CelestialParser.LNOT - 71)) | (1 << (CelestialParser.SUB - 71)) | (1 << (CelestialParser.LBRACE - 71)) | (1 << (CelestialParser.LPAREN - 71)) | (1 << (CelestialParser.Iden - 71)))) != 0):
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self.varDecl()
                    pass

                elif la_ == 2:
                    self.state = 505
                    self.statement()
                    pass


                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self.returnStatement()
            self.state = 512
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CelestialParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CelestialParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(CelestialParser.RETURN)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                self.state = 515
                self.expr(0)


            self.state = 518
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_varDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDecl" ):
                listener.enterVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDecl" ):
                listener.exitVarDecl(self)




    def varDecl(self):

        localctx = CelestialParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.datatype(0)
            self.state = 521
            self.iden()
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.ASSIGN:
                self.state = 522
                self.match(CelestialParser.ASSIGN)
                self.state = 523
                self.expr(0)


            self.state = 526
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CelestialParser.USING, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def FOR(self):
            return self.getToken(CelestialParser.FOR, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def MUL(self):
            return self.getToken(CelestialParser.MUL, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_usingForDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDecl" ):
                listener.enterUsingForDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDecl" ):
                listener.exitUsingForDecl(self)




    def usingForDecl(self):

        localctx = CelestialParser.UsingForDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_usingForDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CelestialParser.USING)
            self.state = 529
            self.iden()
            self.state = 530
            self.match(CelestialParser.FOR)
            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.ADDR, CelestialParser.BOOL, CelestialParser.EVENT, CelestialParser.EVENTLOG, CelestialParser.UINT, CelestialParser.UINT8, CelestialParser.INSTMAP, CelestialParser.INT, CelestialParser.STRING, CelestialParser.MAP, CelestialParser.BYTES, CelestialParser.BYTES20, CelestialParser.BYTES32, CelestialParser.Iden]:
                self.state = 531
                self.datatype(0)
                pass
            elif token in [CelestialParser.MUL]:
                self.state = 532
                self.match(CelestialParser.MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 535
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopVarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_loopVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopVarDecl" ):
                listener.enterLoopVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopVarDecl" ):
                listener.exitLoopVarDecl(self)




    def loopVarDecl(self):

        localctx = CelestialParser.LoopVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_loopVarDecl)
        try:
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.datatype(0)
                self.state = 538
                self.iden()
                self.state = 539
                self.match(CelestialParser.ASSIGN)
                self.state = 540
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.iden()
                self.state = 543
                self.match(CelestialParser.ASSIGN)
                self.state = 544
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arrayName = None # LvalueContext
            self.value = None # ExprContext
            self.toDelete = None # LvalueContext
            self.assignTo = None # LvalueContext
            self.otherContractInstance = None # LvalueContext
            self.method = None # IdenContext
            self.assignment = None # Token
            self.thenBranch = None # StatementContext
            self.loopBody = None # StatementContext
            self.contract = None # ExprContext
            self.payload = None # ExprContext
            self.to = None # ExprContext
            self.amount = None # ExprContext
            self.event = None # IdenContext

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.StatementContext)
            else:
                return self.getTypedRuleContext(CelestialParser.StatementContext,i)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def PUSH(self):
            return self.getToken(CelestialParser.PUSH, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.SEMI)
            else:
                return self.getToken(CelestialParser.SEMI, i)

        def lvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LvalueContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def POP(self):
            return self.getToken(CelestialParser.POP, 0)

        def DELETE(self):
            return self.getToken(CelestialParser.DELETE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def ASSERT(self):
            return self.getToken(CelestialParser.ASSERT, 0)

        def StringLiteral(self):
            return self.getToken(CelestialParser.StringLiteral, 0)

        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def rvalueList(self):
            return self.getTypedRuleContext(CelestialParser.RvalueListContext,0)


        def CALL(self):
            return self.getToken(CelestialParser.CALL, 0)

        def BOOL(self):
            return self.getToken(CelestialParser.BOOL, 0)

        def CALLUINT(self):
            return self.getToken(CelestialParser.CALLUINT, 0)

        def UINT(self):
            return self.getToken(CelestialParser.UINT, 0)

        def CALLBOOL(self):
            return self.getToken(CelestialParser.CALLBOOL, 0)

        def rvalue(self):
            return self.getTypedRuleContext(CelestialParser.RvalueContext,0)


        def IF(self):
            return self.getToken(CelestialParser.IF, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(CelestialParser.ElseStatementContext,0)


        def FOR(self):
            return self.getToken(CelestialParser.FOR, 0)

        def loopVarDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LoopVarDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LoopVarDeclContext,i)


        def SEND(self):
            return self.getToken(CelestialParser.SEND, 0)

        def ETRANSFER(self):
            return self.getToken(CelestialParser.ETRANSFER, 0)

        def TRANSFER(self):
            return self.getToken(CelestialParser.TRANSFER, 0)

        def EMIT(self):
            return self.getToken(CelestialParser.EMIT, 0)

        def REVERT(self):
            return self.getToken(CelestialParser.REVERT, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CelestialParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.match(CelestialParser.LBRACE)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.UINT) | (1 << CelestialParser.ASSERT) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.DELETE) | (1 << CelestialParser.EMIT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FOR) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.IF) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CelestialParser.REVERT - 71)) | (1 << (CelestialParser.SAFEADD - 71)) | (1 << (CelestialParser.SAFEDIV - 71)) | (1 << (CelestialParser.SAFEMOD - 71)) | (1 << (CelestialParser.SAFEMUL - 71)) | (1 << (CelestialParser.SAFESUB - 71)) | (1 << (CelestialParser.SEND - 71)) | (1 << (CelestialParser.SENDER - 71)) | (1 << (CelestialParser.THIS - 71)) | (1 << (CelestialParser.TXGASPRICE - 71)) | (1 << (CelestialParser.TXORIGIN - 71)) | (1 << (CelestialParser.UINT_MAX - 71)) | (1 << (CelestialParser.VALUE - 71)) | (1 << (CelestialParser.BoolLiteral - 71)) | (1 << (CelestialParser.IntLiteral - 71)) | (1 << (CelestialParser.NullLiteral - 71)) | (1 << (CelestialParser.StringLiteral - 71)) | (1 << (CelestialParser.LNOT - 71)) | (1 << (CelestialParser.SUB - 71)) | (1 << (CelestialParser.LBRACE - 71)) | (1 << (CelestialParser.LPAREN - 71)) | (1 << (CelestialParser.Iden - 71)))) != 0):
                    self.state = 549
                    self.statement()
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 555
                self.match(CelestialParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                localctx.arrayName = self.lvalue(0)
                self.state = 557
                self.match(CelestialParser.DOT)
                self.state = 558
                self.match(CelestialParser.PUSH)
                self.state = 559
                self.match(CelestialParser.LPAREN)
                self.state = 560
                localctx.value = self.expr(0)
                self.state = 561
                self.match(CelestialParser.RPAREN)
                self.state = 562
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 564
                localctx.arrayName = self.lvalue(0)
                self.state = 565
                self.match(CelestialParser.DOT)
                self.state = 566
                self.match(CelestialParser.POP)
                self.state = 567
                self.match(CelestialParser.LPAREN)
                self.state = 568
                self.match(CelestialParser.RPAREN)
                self.state = 569
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 571
                self.match(CelestialParser.DELETE)
                self.state = 572
                self.match(CelestialParser.LPAREN)
                self.state = 573
                localctx.toDelete = self.lvalue(0)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 574
                    self.match(CelestialParser.COMMA)
                    self.state = 575
                    localctx.value = self.expr(0)


                self.state = 578
                self.match(CelestialParser.RPAREN)
                self.state = 579
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 581
                self.match(CelestialParser.ASSERT)
                self.state = 582
                self.expr(0)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 583
                    self.match(CelestialParser.COMMA)
                    self.state = 584
                    self.match(CelestialParser.StringLiteral)


                self.state = 587
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 589
                localctx.assignTo = self.lvalue(0)
                self.state = 590
                self.match(CelestialParser.ASSIGN)
                self.state = 591
                self.match(CelestialParser.NEW)
                self.state = 592
                self.iden()
                self.state = 593
                self.match(CelestialParser.LPAREN)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 594
                    self.rvalueList()


                self.state = 597
                self.match(CelestialParser.RPAREN)
                self.state = 598
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 600
                self.expr(0)
                self.state = 601
                self.match(CelestialParser.DOT)
                self.state = 602
                self.match(CelestialParser.CALL)
                self.state = 603
                self.match(CelestialParser.LPAREN)
                self.state = 604
                self.rvalueList()
                self.state = 605
                self.match(CelestialParser.RPAREN)
                self.state = 606
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 608
                self.match(CelestialParser.BOOL)
                self.state = 609
                self.iden()
                self.state = 610
                self.match(CelestialParser.ASSIGN)
                self.state = 611
                self.expr(0)
                self.state = 612
                self.match(CelestialParser.DOT)
                self.state = 613
                self.match(CelestialParser.CALL)
                self.state = 614
                self.match(CelestialParser.LPAREN)
                self.state = 615
                self.rvalueList()
                self.state = 616
                self.match(CelestialParser.RPAREN)
                self.state = 617
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 619
                self.lvalue(0)
                self.state = 620
                self.match(CelestialParser.ASSIGN)
                self.state = 621
                self.expr(0)
                self.state = 622
                self.match(CelestialParser.DOT)
                self.state = 623
                self.match(CelestialParser.CALL)
                self.state = 624
                self.match(CelestialParser.LPAREN)
                self.state = 625
                self.rvalueList()
                self.state = 626
                self.match(CelestialParser.RPAREN)
                self.state = 627
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 629
                self.expr(0)
                self.state = 630
                self.match(CelestialParser.DOT)
                self.state = 631
                self.match(CelestialParser.CALLUINT)
                self.state = 632
                self.match(CelestialParser.LPAREN)
                self.state = 633
                self.rvalueList()
                self.state = 634
                self.match(CelestialParser.RPAREN)
                self.state = 635
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 637
                self.match(CelestialParser.UINT)
                self.state = 638
                self.iden()
                self.state = 639
                self.match(CelestialParser.ASSIGN)
                self.state = 640
                self.expr(0)
                self.state = 641
                self.match(CelestialParser.DOT)
                self.state = 642
                self.match(CelestialParser.CALLUINT)
                self.state = 643
                self.match(CelestialParser.LPAREN)
                self.state = 644
                self.rvalueList()
                self.state = 645
                self.match(CelestialParser.RPAREN)
                self.state = 646
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 648
                self.expr(0)
                self.state = 649
                self.match(CelestialParser.DOT)
                self.state = 650
                self.match(CelestialParser.CALLBOOL)
                self.state = 651
                self.match(CelestialParser.LPAREN)
                self.state = 652
                self.rvalueList()
                self.state = 653
                self.match(CelestialParser.RPAREN)
                self.state = 654
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 656
                self.match(CelestialParser.BOOL)
                self.state = 657
                self.iden()
                self.state = 658
                self.match(CelestialParser.ASSIGN)
                self.state = 659
                self.expr(0)
                self.state = 660
                self.match(CelestialParser.DOT)
                self.state = 661
                self.match(CelestialParser.CALLBOOL)
                self.state = 662
                self.match(CelestialParser.LPAREN)
                self.state = 663
                self.rvalueList()
                self.state = 664
                self.match(CelestialParser.RPAREN)
                self.state = 665
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 667
                localctx.otherContractInstance = self.lvalue(0)
                self.state = 668
                self.match(CelestialParser.DOT)
                self.state = 669
                localctx.method = self.iden()
                self.state = 670
                self.match(CelestialParser.LPAREN)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 671
                    self.rvalueList()


                self.state = 674
                self.match(CelestialParser.RPAREN)
                self.state = 675
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 677
                localctx.assignTo = self.lvalue(0)
                self.state = 678
                self.match(CelestialParser.ASSIGN)
                self.state = 679
                localctx.otherContractInstance = self.lvalue(0)
                self.state = 680
                self.match(CelestialParser.DOT)
                self.state = 681
                localctx.method = self.iden()
                self.state = 682
                self.match(CelestialParser.LPAREN)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 683
                    self.rvalueList()


                self.state = 686
                self.match(CelestialParser.RPAREN)
                self.state = 687
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 689
                localctx.assignTo = self.lvalue(0)
                self.state = 690
                localctx.assignment = self.match(CelestialParser.ASSIGN)
                self.state = 691
                self.rvalue()
                self.state = 692
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 694
                self.match(CelestialParser.IF)
                self.state = 695
                self.match(CelestialParser.LPAREN)
                self.state = 696
                self.expr(0)
                self.state = 697
                self.match(CelestialParser.RPAREN)
                self.state = 698
                localctx.thenBranch = self.statement()
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.elseStatement()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 702
                self.match(CelestialParser.FOR)
                self.state = 703
                self.match(CelestialParser.LPAREN)
                self.state = 704
                self.loopVarDecl()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 705
                    self.match(CelestialParser.COMMA)
                    self.state = 706
                    self.loopVarDecl()
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 712
                self.match(CelestialParser.SEMI)
                self.state = 713
                self.expr(0)
                self.state = 714
                self.match(CelestialParser.SEMI)
                self.state = 715
                self.expr(0)
                self.state = 716
                self.match(CelestialParser.SEMI)
                self.state = 717
                self.match(CelestialParser.RPAREN)
                self.state = 718
                localctx.loopBody = self.statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 720
                localctx.method = self.iden()
                self.state = 721
                self.match(CelestialParser.LPAREN)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 722
                    self.rvalueList()


                self.state = 725
                self.match(CelestialParser.RPAREN)
                self.state = 726
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 728
                self.match(CelestialParser.SEND)
                self.state = 729
                self.match(CelestialParser.LPAREN)
                self.state = 730
                localctx.contract = self.expr(0)
                self.state = 731
                self.match(CelestialParser.COMMA)
                self.state = 732
                self.match(CelestialParser.ETRANSFER)
                self.state = 733
                self.match(CelestialParser.COMMA)
                self.state = 734
                localctx.payload = self.expr(0)
                self.state = 735
                self.match(CelestialParser.RPAREN)
                self.state = 736
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 738
                localctx.to = self.expr(0)
                self.state = 739
                self.match(CelestialParser.DOT)
                self.state = 740
                self.match(CelestialParser.TRANSFER)
                self.state = 741
                self.match(CelestialParser.LPAREN)
                self.state = 742
                localctx.amount = self.expr(0)
                self.state = 743
                self.match(CelestialParser.RPAREN)
                self.state = 744
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 746
                self.match(CelestialParser.EMIT)
                self.state = 747
                localctx.event = self.iden()
                self.state = 748
                self.match(CelestialParser.LPAREN)
                self.state = 749
                localctx.payload = self.expr(0)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 750
                    self.match(CelestialParser.COMMA)
                    self.state = 751
                    localctx.payload = self.expr(0)
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self.match(CelestialParser.RPAREN)
                self.state = 758
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 760
                self.match(CelestialParser.REVERT)
                self.state = 761
                self.match(CelestialParser.LPAREN)
                self.state = 762
                self.match(CelestialParser.StringLiteral)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 763
                    self.match(CelestialParser.COMMA)
                    self.state = 764
                    self.rvalueList()


                self.state = 767
                self.match(CelestialParser.RPAREN)
                self.state = 768
                self.match(CelestialParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(CelestialParser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(CelestialParser.StatementContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = CelestialParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(CelestialParser.ELSE)
            self.state = 772
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LvalueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext
            self.field = None # IdenContext

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CelestialParser.LvalueContext,0)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_lvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvalue" ):
                listener.enterLvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvalue" ):
                listener.exitLvalue(self)



    def lvalue(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.LvalueContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_lvalue, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            localctx.name = self.iden()
            self._ctx.stop = self._input.LT(-1)
            self.state = 787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 785
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        localctx = CelestialParser.LvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lvalue)
                        self.state = 777
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 778
                        self.match(CelestialParser.DOT)
                        self.state = 779
                        localctx.field = self.iden()
                        pass

                    elif la_ == 2:
                        localctx = CelestialParser.LvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lvalue)
                        self.state = 780
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 781
                        self.match(CelestialParser.LBRACK)
                        self.state = 782
                        self.expr(0)
                        self.state = 783
                        self.match(CelestialParser.RBRACK)
                        pass

             
                self.state = 789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogcheckContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event = None # IdenContext
            self.payload = None # ExprContext
            self.to = None # ExprContext

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def ETRANSFER(self):
            return self.getToken(CelestialParser.ETRANSFER, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_logcheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogcheck" ):
                listener.enterLogcheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogcheck" ):
                listener.exitLogcheck(self)




    def logcheck(self):

        localctx = CelestialParser.LogcheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_logcheck)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(CelestialParser.LPAREN)
                self.state = 791
                localctx.event = self.iden()
                self.state = 792
                self.match(CelestialParser.COMMA)
                self.state = 793
                localctx.payload = self.expr(0)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 794
                    self.match(CelestialParser.COMMA)
                    self.state = 795
                    localctx.payload = self.expr(0)
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 801
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(CelestialParser.LPAREN)
                self.state = 804
                localctx.to = self.expr(0)
                self.state = 805
                self.match(CelestialParser.COMMA)
                self.state = 806
                self.match(CelestialParser.ETRANSFER)
                self.state = 807
                self.match(CelestialParser.COMMA)
                self.state = 808
                localctx.payload = self.expr(0)
                self.state = 809
                self.match(CelestialParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array = None # ExprContext
            self.lhs = None # ExprContext
            self.method = None # IdenContext
            self.op = None # Token
            self.rhs = None # ExprContext
            self.contractName = None # IdenContext
            self.instmap = None # IdenContext
            self.condition = None # ExprContext
            self.thenBranch = None # ExprContext
            self.elseBranch = None # ExprContext
            self.logName = None # PrimitiveContext
            self.field = None # IdenContext
            self.index = None # ExprContext

        def primitive(self):
            return self.getTypedRuleContext(CelestialParser.PrimitiveContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LPAREN)
            else:
                return self.getToken(CelestialParser.LPAREN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RPAREN)
            else:
                return self.getToken(CelestialParser.RPAREN, i)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def rvalueList(self):
            return self.getTypedRuleContext(CelestialParser.RvalueListContext,0)


        def FORALL(self):
            return self.getToken(CelestialParser.FORALL, 0)

        def funParamList(self):
            return self.getTypedRuleContext(CelestialParser.FunParamListContext,0)


        def EXISTS(self):
            return self.getToken(CelestialParser.EXISTS, 0)

        def SUB(self):
            return self.getToken(CelestialParser.SUB, 0)

        def LNOT(self):
            return self.getToken(CelestialParser.LNOT, 0)

        def SAFEMOD(self):
            return self.getToken(CelestialParser.SAFEMOD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def SAFEDIV(self):
            return self.getToken(CelestialParser.SAFEDIV, 0)

        def SAFEMUL(self):
            return self.getToken(CelestialParser.SAFEMUL, 0)

        def SAFEADD(self):
            return self.getToken(CelestialParser.SAFEADD, 0)

        def SAFESUB(self):
            return self.getToken(CelestialParser.SAFESUB, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def ADD(self):
            return self.getToken(CelestialParser.ADD, 0)

        def ITE(self):
            return self.getToken(CelestialParser.ITE, 0)

        def DEFAULT(self):
            return self.getToken(CelestialParser.DEFAULT, 0)

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def logcheck(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LogcheckContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LogcheckContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COLON)
            else:
                return self.getToken(CelestialParser.COLON, i)

        def PAYABLE(self):
            return self.getToken(CelestialParser.PAYABLE, 0)

        def MUL(self):
            return self.getToken(CelestialParser.MUL, 0)

        def DIV(self):
            return self.getToken(CelestialParser.DIV, 0)

        def MOD(self):
            return self.getToken(CelestialParser.MOD, 0)

        def PLUS(self):
            return self.getToken(CelestialParser.PLUS, 0)

        def LT(self):
            return self.getToken(CelestialParser.LT, 0)

        def GT(self):
            return self.getToken(CelestialParser.GT, 0)

        def GE(self):
            return self.getToken(CelestialParser.GE, 0)

        def LE(self):
            return self.getToken(CelestialParser.LE, 0)

        def IN(self):
            return self.getToken(CelestialParser.IN, 0)

        def EQ(self):
            return self.getToken(CelestialParser.EQ, 0)

        def NE(self):
            return self.getToken(CelestialParser.NE, 0)

        def LAND(self):
            return self.getToken(CelestialParser.LAND, 0)

        def LOR(self):
            return self.getToken(CelestialParser.LOR, 0)

        def IMPL(self):
            return self.getToken(CelestialParser.IMPL, 0)

        def BIMPL(self):
            return self.getToken(CelestialParser.BIMPL, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def LENGTH(self):
            return self.getToken(CelestialParser.LENGTH, 0)

        def MAPUPD(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.MAPUPD)
            else:
                return self.getToken(CelestialParser.MAPUPD, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 814
                self.primitive()
                pass

            elif la_ == 2:
                self.state = 815
                self.match(CelestialParser.LPAREN)
                self.state = 816
                self.expr(0)
                self.state = 817
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 3:
                self.state = 819
                self.iden()
                self.state = 820
                self.match(CelestialParser.DOT)
                self.state = 821
                localctx.method = self.iden()
                self.state = 822
                self.match(CelestialParser.LPAREN)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 823
                    self.rvalueList()


                self.state = 826
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 4:
                self.state = 828
                localctx.method = self.iden()
                self.state = 829
                self.match(CelestialParser.LPAREN)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 830
                    self.rvalueList()


                self.state = 833
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 5:
                self.state = 835
                self.match(CelestialParser.FORALL)
                self.state = 836
                self.match(CelestialParser.LPAREN)
                self.state = 837
                self.funParamList()
                self.state = 838
                self.match(CelestialParser.RPAREN)
                self.state = 839
                self.match(CelestialParser.LPAREN)
                self.state = 840
                self.expr(0)
                self.state = 841
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 6:
                self.state = 843
                self.match(CelestialParser.EXISTS)
                self.state = 844
                self.match(CelestialParser.LPAREN)
                self.state = 845
                self.funParamList()
                self.state = 846
                self.match(CelestialParser.RPAREN)
                self.state = 847
                self.match(CelestialParser.LPAREN)
                self.state = 848
                self.expr(0)
                self.state = 849
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 7:
                self.state = 851
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==CelestialParser.LNOT or _la==CelestialParser.SUB):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 852
                self.expr(21)
                pass

            elif la_ == 8:
                self.state = 853
                self.match(CelestialParser.SAFEMOD)
                self.state = 854
                self.match(CelestialParser.LPAREN)
                self.state = 855
                localctx.lhs = self.expr(0)
                self.state = 856
                self.match(CelestialParser.COMMA)
                self.state = 857
                localctx.rhs = self.expr(0)
                self.state = 858
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 9:
                self.state = 860
                self.match(CelestialParser.SAFEDIV)
                self.state = 861
                self.match(CelestialParser.LPAREN)
                self.state = 862
                localctx.lhs = self.expr(0)
                self.state = 863
                self.match(CelestialParser.COMMA)
                self.state = 864
                localctx.rhs = self.expr(0)
                self.state = 865
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 867
                self.match(CelestialParser.SAFEMUL)
                self.state = 868
                self.match(CelestialParser.LPAREN)
                self.state = 869
                localctx.lhs = self.expr(0)
                self.state = 870
                self.match(CelestialParser.COMMA)
                self.state = 871
                localctx.rhs = self.expr(0)
                self.state = 872
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 874
                self.match(CelestialParser.SAFEADD)
                self.state = 875
                self.match(CelestialParser.LPAREN)
                self.state = 876
                localctx.lhs = self.expr(0)
                self.state = 877
                self.match(CelestialParser.COMMA)
                self.state = 878
                localctx.rhs = self.expr(0)
                self.state = 879
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 12:
                self.state = 881
                self.match(CelestialParser.SAFESUB)
                self.state = 882
                self.match(CelestialParser.LPAREN)
                self.state = 883
                localctx.lhs = self.expr(0)
                self.state = 884
                self.match(CelestialParser.COMMA)
                self.state = 885
                localctx.rhs = self.expr(0)
                self.state = 886
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 888
                self.iden()
                self.state = 889
                self.match(CelestialParser.LPAREN)
                self.state = 890
                self.expr(0)
                self.state = 891
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 14:
                self.state = 893
                self.match(CelestialParser.NEW)
                self.state = 894
                localctx.contractName = self.iden()
                self.state = 895
                self.match(CelestialParser.LPAREN)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 896
                    self.rvalueList()


                self.state = 899
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 15:
                self.state = 901
                localctx.instmap = self.iden()
                self.state = 902
                self.match(CelestialParser.DOT)
                self.state = 903
                self.match(CelestialParser.ADD)
                self.state = 904
                self.match(CelestialParser.LPAREN)
                self.state = 905
                self.match(CelestialParser.NEW)
                self.state = 906
                localctx.contractName = self.iden()
                self.state = 907
                self.match(CelestialParser.LPAREN)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CelestialParser.SAFEADD - 73)) | (1 << (CelestialParser.SAFEDIV - 73)) | (1 << (CelestialParser.SAFEMOD - 73)) | (1 << (CelestialParser.SAFEMUL - 73)) | (1 << (CelestialParser.SAFESUB - 73)) | (1 << (CelestialParser.SENDER - 73)) | (1 << (CelestialParser.THIS - 73)) | (1 << (CelestialParser.TXGASPRICE - 73)) | (1 << (CelestialParser.TXORIGIN - 73)) | (1 << (CelestialParser.UINT_MAX - 73)) | (1 << (CelestialParser.VALUE - 73)) | (1 << (CelestialParser.BoolLiteral - 73)) | (1 << (CelestialParser.IntLiteral - 73)) | (1 << (CelestialParser.NullLiteral - 73)) | (1 << (CelestialParser.StringLiteral - 73)) | (1 << (CelestialParser.LNOT - 73)) | (1 << (CelestialParser.SUB - 73)) | (1 << (CelestialParser.LPAREN - 73)) | (1 << (CelestialParser.Iden - 73)))) != 0):
                    self.state = 908
                    self.rvalueList()


                self.state = 911
                self.match(CelestialParser.RPAREN)
                self.state = 912
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 16:
                self.state = 914
                self.match(CelestialParser.ITE)
                self.state = 915
                self.match(CelestialParser.LPAREN)
                self.state = 916
                localctx.condition = self.expr(0)
                self.state = 917
                self.match(CelestialParser.COMMA)
                self.state = 918
                localctx.thenBranch = self.expr(0)
                self.state = 919
                self.match(CelestialParser.COMMA)
                self.state = 920
                localctx.elseBranch = self.expr(0)
                self.state = 921
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 17:
                self.state = 923
                self.match(CelestialParser.DEFAULT)
                self.state = 924
                self.match(CelestialParser.LPAREN)
                self.state = 925
                self.datatype(0)
                self.state = 926
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 18:
                self.state = 928
                self.logcheck()
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 929
                        self.match(CelestialParser.COLON)
                        self.state = 930
                        self.match(CelestialParser.COLON)
                        self.state = 931
                        self.logcheck() 
                    self.state = 936
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 937
                self.match(CelestialParser.COLON)
                self.state = 938
                self.match(CelestialParser.COLON)
                self.state = 939
                localctx.logName = self.primitive()
                pass

            elif la_ == 19:
                self.state = 941
                self.match(CelestialParser.PAYABLE)
                self.state = 942
                self.match(CelestialParser.LPAREN)
                self.state = 943
                self.expr(0)
                self.state = 944
                self.match(CelestialParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 995
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 948
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 949
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & ((1 << (CelestialParser.MUL - 114)) | (1 << (CelestialParser.DIV - 114)) | (1 << (CelestialParser.MOD - 114)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 950
                        localctx.rhs = self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 951
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 952
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.PLUS or _la==CelestialParser.SUB):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 953
                        localctx.rhs = self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 954
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 955
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (CelestialParser.IN - 46)) | (1 << (CelestialParser.LE - 46)) | (1 << (CelestialParser.GE - 46)) | (1 << (CelestialParser.LT - 46)) | (1 << (CelestialParser.GT - 46)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 956
                        localctx.rhs = self.expr(14)
                        pass

                    elif la_ == 4:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 957
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 958
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.EQ or _la==CelestialParser.NE):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 959
                        localctx.rhs = self.expr(13)
                        pass

                    elif la_ == 5:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 960
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 961
                        localctx.op = self.match(CelestialParser.LAND)
                        self.state = 962
                        localctx.rhs = self.expr(12)
                        pass

                    elif la_ == 6:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 963
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 964
                        localctx.op = self.match(CelestialParser.LOR)
                        self.state = 965
                        localctx.rhs = self.expr(11)
                        pass

                    elif la_ == 7:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 966
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 967
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.IMPL or _la==CelestialParser.BIMPL):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 968
                        localctx.rhs = self.expr(10)
                        pass

                    elif la_ == 8:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 969
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 970
                        self.match(CelestialParser.DOT)
                        self.state = 971
                        localctx.field = self.iden()
                        pass

                    elif la_ == 9:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.array = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 972
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 973
                        self.match(CelestialParser.LBRACK)
                        self.state = 974
                        localctx.index = self.expr(0)
                        self.state = 975
                        self.match(CelestialParser.RBRACK)
                        pass

                    elif la_ == 10:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.array = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 977
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 978
                        self.match(CelestialParser.DOT)
                        self.state = 979
                        self.match(CelestialParser.LENGTH)
                        self.state = 980
                        self.match(CelestialParser.LPAREN)
                        self.state = 981
                        self.match(CelestialParser.RPAREN)
                        pass

                    elif la_ == 11:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 982
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 983
                        self.match(CelestialParser.MAPUPD)
                        self.state = 984
                        self.expr(0)
                        self.state = 992
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 985
                                self.match(CelestialParser.COMMA)
                                self.state = 986
                                self.expr(0)
                                self.state = 987
                                self.match(CelestialParser.MAPUPD)
                                self.state = 988
                                self.expr(0) 
                            self.state = 994
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                        pass

             
                self.state = 999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimitiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def VALUE(self):
            return self.getToken(CelestialParser.VALUE, 0)

        def BALANCE(self):
            return self.getToken(CelestialParser.BALANCE, 0)

        def SENDER(self):
            return self.getToken(CelestialParser.SENDER, 0)

        def TXGASPRICE(self):
            return self.getToken(CelestialParser.TXGASPRICE, 0)

        def TXORIGIN(self):
            return self.getToken(CelestialParser.TXORIGIN, 0)

        def BCOINBASE(self):
            return self.getToken(CelestialParser.BCOINBASE, 0)

        def BDIFF(self):
            return self.getToken(CelestialParser.BDIFF, 0)

        def BGASLIMIT(self):
            return self.getToken(CelestialParser.BGASLIMIT, 0)

        def BNUMBER(self):
            return self.getToken(CelestialParser.BNUMBER, 0)

        def BTIMESTAMP(self):
            return self.getToken(CelestialParser.BTIMESTAMP, 0)

        def LOG(self):
            return self.getToken(CelestialParser.LOG, 0)

        def INT_MIN(self):
            return self.getToken(CelestialParser.INT_MIN, 0)

        def INT_MAX(self):
            return self.getToken(CelestialParser.INT_MAX, 0)

        def UINT_MAX(self):
            return self.getToken(CelestialParser.UINT_MAX, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def BoolLiteral(self):
            return self.getToken(CelestialParser.BoolLiteral, 0)

        def IntLiteral(self):
            return self.getToken(CelestialParser.IntLiteral, 0)

        def NullLiteral(self):
            return self.getToken(CelestialParser.NullLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CelestialParser.StringLiteral, 0)

        def THIS(self):
            return self.getToken(CelestialParser.THIS, 0)

        def ADDR(self):
            return self.getToken(CelestialParser.ADDR, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_primitive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive" ):
                listener.enterPrimitive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive" ):
                listener.exitPrimitive(self)




    def primitive(self):

        localctx = CelestialParser.PrimitiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_primitive)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.iden()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(CelestialParser.VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self.match(CelestialParser.BALANCE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1003
                self.match(CelestialParser.SENDER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1004
                self.match(CelestialParser.TXGASPRICE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1005
                self.match(CelestialParser.TXORIGIN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1006
                self.match(CelestialParser.BCOINBASE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1007
                self.match(CelestialParser.BDIFF)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1008
                self.match(CelestialParser.BGASLIMIT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1009
                self.match(CelestialParser.BNUMBER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1010
                self.match(CelestialParser.BTIMESTAMP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1011
                self.match(CelestialParser.LOG)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1012
                self.match(CelestialParser.INT_MIN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1013
                self.match(CelestialParser.INT_MAX)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1014
                self.match(CelestialParser.UINT_MAX)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1015
                self.match(CelestialParser.NEW)
                self.state = 1016
                self.match(CelestialParser.LPAREN)
                self.state = 1017
                self.iden()
                self.state = 1018
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1020
                self.match(CelestialParser.NEW)
                self.state = 1021
                self.match(CelestialParser.LPAREN)
                self.state = 1022
                self.match(CelestialParser.BALANCE)
                self.state = 1023
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1024
                self.match(CelestialParser.NEW)
                self.state = 1025
                self.match(CelestialParser.LPAREN)
                self.state = 1026
                self.match(CelestialParser.LOG)
                self.state = 1027
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1028
                self.match(CelestialParser.BoolLiteral)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1029
                self.match(CelestialParser.IntLiteral)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1030
                self.match(CelestialParser.NullLiteral)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1031
                self.match(CelestialParser.StringLiteral)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1032
                self.match(CelestialParser.THIS)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1033
                self.match(CelestialParser.ADDR)
                self.state = 1034
                self.match(CelestialParser.LPAREN)
                self.state = 1035
                self.match(CelestialParser.THIS)
                self.state = 1036
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1037
                self.match(CelestialParser.ADDR)
                self.state = 1038
                self.match(CelestialParser.LPAREN)
                self.state = 1039
                self.iden()
                self.state = 1040
                self.match(CelestialParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnnamedTupleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._rvalue = None # RvalueContext
            self.fields = list() # of RvalueContexts

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_unnamedTupleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedTupleBody" ):
                listener.enterUnnamedTupleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedTupleBody" ):
                listener.exitUnnamedTupleBody(self)




    def unnamedTupleBody(self):

        localctx = CelestialParser.UnnamedTupleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_unnamedTupleBody)
        self._la = 0 # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                localctx._rvalue = self.rvalue()
                localctx.fields.append(localctx._rvalue)
                self.state = 1045
                self.match(CelestialParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                localctx._rvalue = self.rvalue()
                localctx.fields.append(localctx._rvalue)
                self.state = 1050 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1048
                    self.match(CelestialParser.COMMA)
                    self.state = 1049
                    localctx._rvalue = self.rvalue()
                    localctx.fields.append(localctx._rvalue)
                    self.state = 1052 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.COMMA):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedTupleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._iden = None # IdenContext
            self.names = list() # of IdenContexts
            self._rvalue = None # RvalueContext
            self.values = list() # of RvalueContexts

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.ASSIGN)
            else:
                return self.getToken(CelestialParser.ASSIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_namedTupleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedTupleBody" ):
                listener.enterNamedTupleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedTupleBody" ):
                listener.exitNamedTupleBody(self)




    def namedTupleBody(self):

        localctx = CelestialParser.NamedTupleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_namedTupleBody)
        self._la = 0 # Token type
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                localctx._iden = self.iden()
                localctx.names.append(localctx._iden)
                self.state = 1057
                self.match(CelestialParser.ASSIGN)
                self.state = 1058
                localctx._rvalue = self.rvalue()
                localctx.values.append(localctx._rvalue)
                self.state = 1059
                self.match(CelestialParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                localctx._iden = self.iden()
                localctx.names.append(localctx._iden)
                self.state = 1062
                self.match(CelestialParser.ASSIGN)
                self.state = 1063
                localctx._rvalue = self.rvalue()
                localctx.values.append(localctx._rvalue)
                self.state = 1069 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1064
                    self.match(CelestialParser.COMMA)
                    self.state = 1065
                    localctx._iden = self.iden()
                    localctx.names.append(localctx._iden)
                    self.state = 1066
                    self.match(CelestialParser.ASSIGN)
                    self.state = 1067
                    localctx._rvalue = self.rvalue()
                    localctx.values.append(localctx._rvalue)
                    self.state = 1071 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.COMMA):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RvalueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_rvalueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvalueList" ):
                listener.enterRvalueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvalueList" ):
                listener.exitRvalueList(self)




    def rvalueList(self):

        localctx = CelestialParser.RvalueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_rvalueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.rvalue()
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 1076
                self.match(CelestialParser.COMMA)
                self.state = 1077
                self.rvalue()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RvalueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_rvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvalue" ):
                listener.enterRvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvalue" ):
                listener.exitRvalue(self)




    def rvalue(self):

        localctx = CelestialParser.RvalueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_rvalue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.datatype_sempred
        self._predicates[37] = self.lvalue_sempred
        self._predicates[39] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def datatype_sempred(self, localctx:DatatypeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 15)
         

    def lvalue_sempred(self, localctx:LvalueContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         




