(*Code generated by compiler*)

module OtherContract

open FStar.Celestial
open FStar.Celestial.Effect
module CM = FStar.Celestial.ContractsMap
open FStar.Mul
module M = FStar.Celestial.Map
module L = FStar.List.Tot
module A = FStar.Celestial.Array


noeq type t_othercontract = {
  othercontract_otherContractField : int;
}

(* Contract address type, liveness, and field range macros *)

type othercontract_address = contract t_othercontract
let othercontract_live (c:othercontract_address) (bst:bstate) =
  c `CM.live_in` bst.cmap

let othercontract_fields_in_range (self:othercontract_address) (bst:bstate{self `othercontract_live` bst}) : Type0 =
  let cs = CM.sel self bst.cmap in
    (cs.othercontract_otherContractField >= int_min) /\ (cs.othercontract_otherContractField <= int_max)

(* Field getters for contract OtherContract *)

let othercontract_get_otherContractField (c:othercontract_address)
: StEth int
  (fun st -> c `othercontract_live` st.current)
  (fun st0 r st1 ->
    st0 == st1 /\ r == (CM.sel c st0.current.cmap).othercontract_otherContractField)
= let othercontract_inst = get_contract c in
  othercontract_inst.othercontract_otherContractField

(* Field setters for contract OtherContract *)

let othercontract_set_otherContractField (c:othercontract_address) (_otherContractField:int)
: StEth unit
  (fun st -> c `othercontract_live` st.current
              /\ _otherContractField >= int_min /\ _otherContractField <= int_max)
  (fun st0 _ st1 ->
    modifies_cmap_only (Set.singleton c) st0.current st1.current /\
    othercontract_live c st1.current /\
    (let instance0 = CM.sel c st0.current.cmap in
     let instance1 = CM.sel c st1.current.cmap in
    instance1 == { instance0 with othercontract_otherContractField = _otherContractField }))
= let othercontract_inst = get_contract c in
  let othercontract_inst = { othercontract_inst with othercontract_otherContractField = _otherContractField } in
  set_contract c othercontract_inst

let setOtherContractField (self:othercontract_address) (sender:address) (value:int) (now:int) (_otherContractField:int)
: Eth unit
  (fun bst ->
    othercontract_live self bst /\ (
    let cs = CM.sel self bst.cmap in
    let b = pure_get_balance_bst self bst in
    let l = bst.log in
      (sender <> null) /\ (value <= uint_max) /\ (sender <> self)
      /\ (_otherContractField >= int_min) /\ (_otherContractField <= int_max)
      /\ (othercontract_fields_in_range self bst)
      /\ (value >= 0)
  ))
  (fun bst -> False)
  (fun bst0 x bst1 ->
    othercontract_live self bst1 /\ (
    let cs0 = CM.sel self bst0.cmap in
    let cs1 = CM.sel self bst1.cmap in
    let b0 = pure_get_balance_bst self bst0 in
    let b1 = pure_get_balance_bst self bst1 in
    let l0 = bst0.log in
    let l1 = bst1.log in
      (othercontract_fields_in_range self bst1)
      /\ (cs1.othercontract_otherContractField == _otherContractField)
      /\ (bst0.balances == bst1.balances)
  ))
=
let cs = get_contract self in
let balance = get_balance self in
let _ = othercontract_set_otherContractField self _otherContractField in
let cs = get_contract self in
()