(*Code generated by compiler*)

module Test

open FStar.Celestial
open FStar.Celestial.Effect
module CM = FStar.Celestial.ContractsMap
open FStar.Mul
module M = FStar.Celestial.Map
module L = FStar.List.Tot
module A = FStar.Celestial.Array


type t_test = unit

(* Contract address type, liveness, and field range macros *)

type test_address = contract t_test
let test_live (c:test_address) (bst:bstate) =
  c `CM.live_in` bst.cmap

(* Field getters for contract Test *)

(* Field setters for contract Test *)

let foo (self:test_address) (sender:address) (value:uint) (now:uint) (b:bytes)
: Eth1 bytes32
  (fun bst ->
    test_live self bst /\
    (sender <> null)
  )
  (fun bst -> False)
  (fun bst0 ret bst1 ->
    test_live self bst1 /\ (
    let cs0 = CM.sel self bst0.cmap in
    let cs1 = CM.sel self bst1.cmap in
    let b0 = pure_get_balance_bst self bst0 in
    let b1 = pure_get_balance_bst self bst1 in
    let l0 = bst0.log in
    let l1 = bst1.log in
      ((ret == ((keccak256 b))))
      /\ (bst0.balances == bst1.balances)
  ))
=
let ret:bytes32 = {} in
let cs = get_contract self in
let balance = get_balance self in
let x1 = ((keccak256 b)) in
let ret = x1 in
let cs = get_contract self in
ret

let bar (self:test_address) (sender:address) (value:uint) (now:uint) (b:bytes)
: Eth1 unit
  (fun bst ->
    test_live self bst /\
    (sender <> null)
  )
  (fun bst -> False)
  (fun bst0 x bst1 ->
    test_live self bst1
  )
=
let cs = get_contract self in
let balance = get_balance self in
let local_var:bytes32 = ((sha256 b)) in
()